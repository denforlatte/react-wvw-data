{"version":3,"sources":["serviceWorker.js","reducers/displayStateReducer.js","reducers/fullAPIStateReducer.js","helpers/serverHelper.js","helpers/analyticsHelper.js","reducers/serverOverviewStateReducer.js","reducers/activityAnalyticsStateReducer.js","reducers/index.js","store.js","components/layouts/DropdownButton.js","components/layouts/ServerSelector.js","components/layouts/Header.js","components/Home.js","services/apiService.js","components/ServerOverview.js","components/dataPieces/MapOverview/MapServerScores.js","components/dataPieces/MapOverview/MapOverview.js","components/dataPieces/ObjectivesWonLost/ObjectivesDisplay.js","components/dataPieces/ObjectivesWonLost/ObjectivesWonLost.js","components/dataPieces/KillsTracker/KillsTrackerBars.js","components/dataPieces/KillsTracker/KillsTrackerGraphXAxis.js","components/dataPieces/KillsTracker/KillsTrackerGraph.js","components/dataPieces/KillsTracker/KillsTrackerDisplay.js","components/dataPieces/KillsTracker/KillsTracker.js","components/MapDetails.js","components/MatchUpOverview.js","router.js","index.js"],"names":["Boolean","window","location","hostname","match","displayStateReducer","state","arguments","length","undefined","action","type","Object","objectSpread","fetching","fetchFailed","firstFetchSuccess","selectedServer","payload","fullAPIStateReducer","getNameByCode","serverCode","serverCodes","find","server","id","name","getCodeByName","serverName","i","lowercaseServerName","toLowerCase","toString","formatServerNames","primaryServer","allServers","linkServers","concat","react_default","a","createElement","className","getMapArrayPosition","colour","maps","console","warn","round","value","decimals","Number","Math","beautifyNumber","num","parts","split","replace","join","serverOverviewStateReducer","worlds","scores","skirmishes","red","serverHelper","all_worlds","kills","deaths","ratio","analyticsHelper","skirmishScore","victoryPoints","victory_points","green","blue","log","ppt","activityAnalyticsStateReducer","ebgMap","map","redMap","greenMap","blueMap","calculatedPPT","servers","eternalBattlegrounds","currentPPT","redBorderland","greenBorderland","blueBorderland","totalMapPPT","mapI","x","objectives","owner","points_tick","kd","toConsumableArray","reducers","combineReducers","displayState","fullAPIState","serverOverviewState","activityAnalyticsState","store","createStore","applyMiddleware","logger","promise","DropdownButton","_this$props","this","props","buttonText","dropdownContent","React","Component","ServerSelector","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","serverList","filteredServers","handleClick","bind","_this2","continent","filter","setState","compileDropdownMenu","prevProps","prevState","snapshot","layouts_DropdownButton","_this3","push","Link","to","key","onClick","Header","displayMessage","_props$displayState","setDisplayMessage","_this$props$displaySt","layouts_ServerSelector","message","displayTime","clearTimeout","displayMessageTimer","setTimeout","connect","Home","apiService","instance","getInstance","timerInstance","fetchAPI","dispatch","fetch","config","matchupAPIRoot","then","response","json","startFetchingAPI","clearInterval","refreshInterval","setInterval","stopFetchingAPI","init","ServerOverview","score","MapServerScores","position","MapOverview","mapServerScores","compileMapServerScores","orderByMapScore","mapScores","mapName","activityAnalytics","positions","counter","MapOverview_MapServerScores","mapScoresArray","sort","y","ObjectivesDisplay","won","objectiveColours","stonemist","stonemistIcon","castle","camp","tower","keep","ObjectivesWonLost","selectTimeFrame","objectivesDisplays","compileObjectivesDisplays","totalObjectivesWonLost","checkIsActive","serverColours","getOwnPropertyNames","objectivesWonLost","objective","ObjectivesWonLost_ObjectivesDisplay","_this$props2","timeFrame","currentTime","Date","last_flipped","time","proptypes","Proptypes","string","isRequired","object","number","func","KillsTrackerBars","killsWidth","killsHeight","killsXPos","killsYPos","deathsWidth","deathsHeight","deathsXPos","deathsYPos","width","height","KillsTrackerGraphXAxis","xPos","KillsTrackerGraph","_useState","useState","_useState2","slicedToArray","highestValue","setHighestValue","graphBars","data","highestValueState","dataDiff","startingPos","killsNormalised","deathsNormalised","useGraphBars","timestamps","numberOfIntervals","timestampsXPos","timestampsReference","times","useGraphTimestamps","KillsTrackerDisplay","KillsTracker","killsTrackerDisplays","useKillsTrackerDisplay","array","showToolTip","MapDetails","mapArrayPosition","fullAPI","dataPieces_MapOverview_MapOverview","map_scores","dataPieces_ObjectivesWonLost_ObjectivesWonLost","MatchUpOverview","currentServer","assertThisInitialized","params","ApiService","serverOverviews","compileServerOverviews","mapDetails","compileMapDetails","serverOverview","overviews","j","components_ServerOverview","components_MapDetails","router","BrowserRouter","basename","react","layouts_Header","Switch","Route","path","component","exact","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"k9FAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8ECkBSC,EApCa,WAA2B,IAAlBC,EAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,GAAIG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnD,OAAQC,EAAOC,MACX,IAAK,6BACD,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIQ,UAAU,EACVC,aAAa,IAGrB,IAAK,+BACD,OAAOH,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIU,mBAAmB,EACnBF,UAAU,IAGlB,IAAK,8BACD,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIQ,UAAU,EACVC,aAAa,IAGrB,IAAK,oBACD,OAAOH,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIU,mBAAmB,EACnBC,eAAgBP,EAAOQ,UAG/B,QACI,OAAOZ,ICpBJa,EAXa,WAA2B,IAAlBb,EAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,GAAIG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnD,OAAQC,EAAOC,MACX,IAAK,+BACD,OAAOD,EAAOQ,QAElB,QACI,OAAOZ,YCFZ,SAASc,EAAcC,GAC1B,OAAOC,EAAYC,KAAM,SAAAC,GAAM,OAAIA,EAAOC,KAAOJ,IAAYK,KAK1D,SAASC,EAAcC,GAC1B,IAGIC,EAFAC,EAAsBF,EAAWG,cAGrC,IAAKF,EAAI,EAAGA,EAAIP,EAAYd,OAAQqB,IAChC,GAAIP,EAAYO,GAAGH,KAAKK,gBAAkBD,EAEtC,OADaR,EAAYO,GAAGJ,GACVO,WAG1B,OAAOJ,EAIJ,SAASK,EAAkBC,EAAeC,GAC7C,IAGIN,EAHAO,EAAc,GAIlB,IAAKP,EAAI,EAAGA,EAAIM,EAAW3B,OAAQqB,IAC3BM,EAAWN,KAAOK,IACE,KAAhBE,IACAA,EAAc,MAElBA,GAA4BhB,EAAce,EAAWN,KAW7D,OANAK,EAAgBd,EAAcc,GAE1BC,EAAW3B,OAAS,IACpB4B,EAAW,iBAAAC,OAAoBD,EAApB,MAIXE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,UAAKN,EAAcI,EAAAC,EAAAC,cAAA,YAAOJ,KAY/B,SAASM,EAAoBC,EAAQC,GAGpC,IAAIf,EAOAA,EARR,GAAe,SAAXc,GAEA,IAAKd,EAAI,EAAGA,EAAIe,EAAKpC,OAAQqB,IACzB,GAAI,WAAae,EAAKf,GAAGlB,KACrB,OAAOkB,OAKf,IAAKA,EAAI,EAAGA,EAAIe,EAAKpC,OAAQqB,IACzB,GAAI,GAAAQ,OAAGM,EAAH,UAAoBC,EAAKf,GAAGlB,KAAKoB,cACjC,OAAOF,EAInBgB,QAAQC,KAAK,yCAA2CH,GC3ErD,SAASI,EAAMC,EAAOC,GACzB,OAAOC,OAAOC,KAAKJ,MAAMC,EAAM,IAAIC,GAAU,KAAKA,GAG/C,SAASG,EAAeC,GAC3B,GAAIA,GAAO,IAAO,CACd,IAAIC,EAAQD,EAAIrB,WAAWuB,MAAM,KAEjC,OADAD,EAAM,GAAKA,EAAM,GAAGE,QAAQ,wBAAyB,KAC9CF,EAAMG,KAAK,KAEtB,OAAOJ,ECTX,IAuDeK,EAvDoB,WAA6B,IAApBpD,EAAoBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,GAAIG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5D,OAAQC,EAAOC,MACX,IAAK,+BACID,EAAOQ,QAAQyC,QAAUd,QAAQC,KAAK,0BAG3C,IAAIc,EAASlD,EAAOQ,QAAQ2C,WAAWnD,EAAOQ,QAAQ2C,WAAWrD,OAAS,GAAGoD,OAC7E,OAAOhD,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIwD,IAAIlD,OAAAC,EAAA,EAAAD,CAAA,GACGN,EAAMwD,IADV,CAECpC,KAAMqC,EAA+BrD,EAAOQ,QAAQyC,OAAOG,IAAKpD,EAAOQ,QAAQ8C,WAAWF,KAC1FG,MAAOvD,EAAOQ,QAAQ+C,MAAMH,IAC5BI,OAAQxD,EAAOQ,QAAQgD,OAAOJ,IAC9BK,MAAOC,EAAsB1D,EAAOQ,QAAQ+C,MAAMH,IAAMpD,EAAOQ,QAAQgD,OAAOJ,IAAK,GACnFO,cAAeT,EAAOE,IACtBQ,cAAe5D,EAAOQ,QAAQqD,eAAeT,MAEjDU,MAAM5D,OAAAC,EAAA,EAAAD,CAAA,GACCN,EAAMkE,MADR,CAED9C,KAAMqC,EAA+BrD,EAAOQ,QAAQyC,OAAOa,MAAO9D,EAAOQ,QAAQ8C,WAAWQ,OAC5FP,MAAOvD,EAAOQ,QAAQ+C,MAAMO,MAC5BN,OAAQxD,EAAOQ,QAAQgD,OAAOM,MAC9BL,MAAOC,EAAsB1D,EAAOQ,QAAQ+C,MAAMO,MAAQ9D,EAAOQ,QAAQgD,OAAOM,MAAO,GACvFH,cAAeT,EAAOY,MACtBF,cAAe5D,EAAOQ,QAAQqD,eAAeC,QAEjDC,KAAK7D,OAAAC,EAAA,EAAAD,CAAA,GACEN,EAAMmE,KADT,CAEA/C,KAAMqC,EAA+BrD,EAAOQ,QAAQyC,OAAOc,KAAM/D,EAAOQ,QAAQ8C,WAAWS,MAC3FR,MAAOvD,EAAOQ,QAAQ+C,MAAMQ,KAC5BP,OAAQxD,EAAOQ,QAAQgD,OAAOO,KAC9BN,MAAOC,EAAsB1D,EAAOQ,QAAQ+C,MAAMQ,KAAO/D,EAAOQ,QAAQgD,OAAOO,KAAM,GACrFJ,cAAeT,EAAOa,KACtBH,cAAe5D,EAAOQ,QAAQqD,eAAeE,SAKzD,IAAK,aAED,OADA5B,QAAQ6B,IAAI,gBACL9D,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIwD,IAAIlD,OAAAC,EAAA,EAAAD,CAAA,GACGN,EADJ,CAECqE,IAAKjE,EAAOQ,YAIxB,QACI,OAAOZ,YCSJsE,EA5DuB,WAA2B,IAAlBtE,EAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,GAAIG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7D,OAAQC,EAAOC,MACX,IAAK,+BAED,IAAIkE,EAASnE,EAAOQ,QAAQ0B,KAAKrB,KAAK,SAAAuD,GAAQ,MAAoB,WAAbA,EAAInE,OACrDoE,EAASrE,EAAOQ,QAAQ0B,KAAKrB,KAAK,SAAAuD,GAAQ,MAAoB,YAAbA,EAAInE,OACrDqE,EAAWtE,EAAOQ,QAAQ0B,KAAKrB,KAAK,SAAAuD,GAAQ,MAAoB,cAAbA,EAAInE,OACvDsE,EAAUvE,EAAOQ,QAAQ0B,KAAKrB,KAAK,SAAAuD,GAAQ,MAAoB,aAAbA,EAAInE,OAEtDuE,EFIT,SAAsBtC,GACzB,IAiBIf,EAjBAsD,EAAU,CAAC,MAAO,QAAS,QAE3BD,EAAgB,CAChBE,qBAAsB,CAClBC,WAAY,IAEhBC,cAAe,CACXD,WAAY,IAEhBE,gBAAiB,CACbF,WAAY,IAEhBG,eAAgB,CACZH,WAAY,KAKpB,IAAKxD,EAAI,EAAGA,EAAI,EAAGA,IACfqD,EAAcE,qBAAqBC,WAAWF,EAAQtD,IAAM4D,EAAY1B,EAAiC,OAAQnB,GAAOuC,EAAQtD,IAEpI,IAAKA,EAAI,EAAGA,EAAI,EAAGA,IACfqD,EAAcI,cAAcD,WAAWF,EAAQtD,IAAM4D,EAAY1B,EAAiC,MAAOnB,GAAOuC,EAAQtD,IAE5H,IAAKA,EAAI,EAAGA,EAAI,EAAGA,IACfqD,EAAcK,gBAAgBF,WAAWF,EAAQtD,IAAM4D,EAAY1B,EAAiC,QAASnB,GAAOuC,EAAQtD,IAEhI,IAAKA,EAAI,EAAGA,EAAI,EAAGA,IACfqD,EAAcM,eAAeH,WAAWF,EAAQtD,IAAM4D,EAAY1B,EAAiC,OAAQnB,GAAOuC,EAAQtD,IAI9H,SAAS4D,EAAaC,EAAMlE,GACxB,IAGImE,EAHAC,EAAahD,EAAK8C,GAAME,WACxBH,EAAc,EAGlB,IAAKE,EAAI,EAAGA,EAAIC,EAAWpF,OAAQmF,IAC3BC,EAAWD,GAAGE,MAAM9D,gBAAkBP,IACtCiE,GAAeG,EAAWD,GAAGG,aAIrC,OAAOL,EAGX,OAAOP,EEnDqBd,CAA6B1D,EAAOQ,QAAQ0B,MAChE,OAAOhC,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEI8E,qBAAqBxE,OAAAC,EAAA,EAAAD,CAAA,GACdN,EAAM8E,qBADO,CAEhBC,WAAYH,EAAcE,qBAAqBC,WAC/CU,GAAGnF,OAAAC,EAAA,EAAAD,CAAA,GACIN,EAAM8E,qBAAqBW,GADhC,CAEEjC,IAAG,GAAAzB,OAAAzB,OAAAoF,EAAA,EAAApF,CAAMN,EAAM8E,qBAAqBW,GAAGjC,KAApC,CAAyC,CAACe,EAAOZ,MAAMH,IAAKe,EAAOX,OAAOJ,OAC7EU,MAAK,GAAAnC,OAAAzB,OAAAoF,EAAA,EAAApF,CAAMN,EAAM8E,qBAAqBW,GAAGvB,OAApC,CAA2C,CAACK,EAAOZ,MAAMO,MAAOK,EAAOX,OAAOM,SACnFC,KAAI,GAAApC,OAAAzB,OAAAoF,EAAA,EAAApF,CAAMN,EAAM8E,qBAAqBW,GAAGtB,MAApC,CAA0C,CAACI,EAAOZ,MAAMQ,KAAMI,EAAOX,OAAOO,YAGxFa,cAAc1E,OAAAC,EAAA,EAAAD,CAAA,GACPN,EAAMgF,cADA,CAETD,WAAYH,EAAcI,cAAcD,WACxCU,GAAGnF,OAAAC,EAAA,EAAAD,CAAA,GACIN,EAAMgF,cAAcS,GADzB,CAEEjC,IAAG,GAAAzB,OAAAzB,OAAAoF,EAAA,EAAApF,CAAMN,EAAMgF,cAAcS,GAAGjC,KAA7B,CAAkC,CAACiB,EAAOd,MAAMH,IAAKiB,EAAOb,OAAOJ,OACtEU,MAAK,GAAAnC,OAAAzB,OAAAoF,EAAA,EAAApF,CAAMN,EAAMgF,cAAcS,GAAGvB,OAA7B,CAAoC,CAACO,EAAOd,MAAMO,MAAOO,EAAOb,OAAOM,SAC5EC,KAAI,GAAApC,OAAAzB,OAAAoF,EAAA,EAAApF,CAAMN,EAAMgF,cAAcS,GAAGtB,MAA7B,CAAmC,CAACM,EAAOd,MAAMQ,KAAMM,EAAOb,OAAOO,YAGjFc,gBAAgB3E,OAAAC,EAAA,EAAAD,CAAA,GACTN,EAAMiF,gBADE,CAEXF,WAAYH,EAAcK,gBAAgBF,WAC1CU,GAAGnF,OAAAC,EAAA,EAAAD,CAAA,GACIN,EAAMiF,gBAAgBQ,GAD3B,CAEEjC,IAAG,GAAAzB,OAAAzB,OAAAoF,EAAA,EAAApF,CAAMN,EAAMiF,gBAAgBQ,GAAGjC,KAA/B,CAAoC,CAACkB,EAASf,MAAMH,IAAKkB,EAASd,OAAOJ,OAC5EU,MAAK,GAAAnC,OAAAzB,OAAAoF,EAAA,EAAApF,CAAMN,EAAMiF,gBAAgBQ,GAAGvB,OAA/B,CAAsC,CAACQ,EAASf,MAAMO,MAAOQ,EAASd,OAAOM,SAClFC,KAAI,GAAApC,OAAAzB,OAAAoF,EAAA,EAAApF,CAAMN,EAAMiF,gBAAgBQ,GAAGtB,MAA/B,CAAqC,CAACO,EAASf,MAAMQ,KAAMO,EAASd,OAAOO,YAGvFe,eAAe5E,OAAAC,EAAA,EAAAD,CAAA,GACRN,EAAMkF,eADC,CAEVH,WAAYH,EAAcM,eAAeH,WACzCU,GAAGnF,OAAAC,EAAA,EAAAD,CAAA,GACIN,EAAMkF,eAAeO,GAD1B,CAEEjC,IAAG,GAAAzB,OAAAzB,OAAAoF,EAAA,EAAApF,CAAMN,EAAMkF,eAAeO,GAAGjC,KAA9B,CAAmC,CAACmB,EAAQhB,MAAMH,IAAKmB,EAAQf,OAAOJ,OACzEU,MAAK,GAAAnC,OAAAzB,OAAAoF,EAAA,EAAApF,CAAMN,EAAMkF,eAAeO,GAAGvB,OAA9B,CAAqC,CAACS,EAAQhB,MAAMO,MAAOS,EAAQf,OAAOM,SAC/EC,KAAI,GAAApC,OAAAzB,OAAAoF,EAAA,EAAApF,CAAMN,EAAMkF,eAAeO,GAAGtB,MAA9B,CAAoC,CAACQ,EAAQhB,MAAMQ,KAAMQ,EAAQf,OAAOO,cAK5F,QACI,OAAOnE,ICzCJ2F,EAPAC,YAAgB,CAC3BC,aAAc9F,EACd+F,aAAcjF,EACdkF,oBAAqB3C,EACrB4C,uBAAwB1B,6BCmFb2B,EAFDC,YAAYP,EAzFL,CACjBE,aAAc,CACVlF,eAAgB,GAChBD,mBAAmB,EACnBF,UAAU,EACVC,aAAa,GAEjBqF,aAAc,GACdC,oBAAqB,CACjBvC,IAAK,CACDpC,KAAM,aACNiD,IAAK,IACLV,MAAO,EACPC,OAAQ,EACRC,MAAO,EACPE,cAAe,EACfC,cAAe,GAEnBE,MAAO,CACH9C,KAAM,eACNiD,IAAK,IACLV,MAAO,EACPC,OAAQ,EACRC,MAAO,EACPE,cAAe,EACfC,cAAe,GAEnBG,KAAM,CACF/C,KAAM,cACNiD,IAAK,IACLV,MAAO,EACPC,OAAQ,EACRC,MAAO,EACPE,cAAe,EACfC,cAAe,IAGvBgC,uBAAwB,CACpBlB,qBAAsB,CAClBC,WAAY,CACRvB,IAAK,EACLU,MAAO,EACPC,KAAM,GAEVsB,GAAI,CACAjC,IAAK,GACLU,MAAO,GACPC,KAAM,KAGda,cAAe,CACXD,WAAY,CACRvB,IAAK,EACLU,MAAO,EACPC,KAAM,GAEVsB,GAAI,CACAjC,IAAK,GACLU,MAAO,GACPC,KAAM,KAGdc,gBAAiB,CACbF,WAAY,CACRvB,IAAK,EACLU,MAAO,EACPC,KAAM,GAEVsB,GAAI,CACAjC,IAAK,GACLU,MAAO,GACPC,KAAM,KAGde,eAAgB,CACZH,WAAY,CACRvB,IAAK,EACLU,MAAO,EACPC,KAAM,GAEVsB,GAAI,CACAjC,IAAK,GACLU,MAAO,GACPC,KAAM,OAM4BgC,YAAgBC,IAAQC,mFC7E3DC,mLAdF,IAAAC,EACmCC,KAAKC,MAArCC,EADHH,EACGG,WAAYC,EADfJ,EACeI,gBAEpB,OACI3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,0BAA0BuE,GAC5C1E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACVwE,WARQC,IAAMC,WC4EpBC,cAtEX,SAAAA,EAAYL,GAAO,IAAAM,EAAA,OAAAzG,OAAA0G,EAAA,EAAA1G,CAAAkG,KAAAM,IACfC,EAAAzG,OAAA2G,EAAA,EAAA3G,CAAAkG,KAAAlG,OAAA4G,EAAA,EAAA5G,CAAAwG,GAAAK,KAAAX,KAAMC,KACDzG,MAAQ,CACToH,WAAY,GACZC,gBAAiB,IAGrBN,EAAKO,YAAcP,EAAKO,YAAYC,OAPrBR,mFAUC,IAAAS,EAAAhB,KACRiB,EAAcjB,KAAKC,MAAnBgB,UACJJ,EAAkB,GAIJ,OAAdI,EACAJ,EAAkBrG,EAAY0G,OAAO,SAAAxG,GAAM,OAAIA,EAAOC,IAAM,MACvC,OAAdsG,EACPJ,EAAkBrG,EAAY0G,OAAO,SAAAxG,GAAM,OAAIA,EAAOC,GAAK,OAE3DkG,EAAkBrG,EAClBuB,QAAQC,KAAK,mDAGjBgE,KAAKmB,SAAS,CAACN,mBAAkB,kBAAMG,EAAKI,mEAI7BC,EAAWC,EAAWC,GACjCF,EAAUlH,iBAAmB6F,KAAKC,MAAM9F,gBACxC6F,KAAKoB,uDAOT,OAAO5F,EAAAC,EAAAC,cAAC8F,EAAD,CAAgBtB,WAAYF,KAAKC,MAAMgB,UAAWd,gBAAiBH,KAAKxG,MAAMoH,mDAIrFZ,KAAKmB,SAAS,CAACP,WAAY,mDAGT,IAGd7F,EAHc0G,EAAAzB,KAEdY,EAAa,GAEjB,IAAK7F,EAAI,EAAGA,EAAIiF,KAAKxG,MAAMqH,gBAAgBnH,OAAQqB,IAAK,CACpD,IAAIL,EAASsF,KAAKxG,MAAMqH,gBAAgB9F,GAGpCL,EAAOC,GAAGO,aAAe8E,KAAKC,MAAM9F,eACpCyG,EAAWc,KACPlG,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CAAMC,GAAI,IAAKC,IAAK,YAAcnH,EAAOC,GAAIgB,UAAU,mBAAmBjB,EAAOE,OAGrFgG,EAAWc,KACPlG,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CAAMC,GAAI,IAAMlH,EAAOC,GAAIkH,IAAK,YAAcnH,EAAOC,GAAImH,QAAS,kBAAML,EAAKX,gBAAgBpG,EAAOE,OAOhHoF,KAAKmB,SAAS,CAACP,sBAnEMR,IAAMC,WCF7B0B,cACF,SAAAA,EAAY9B,GAAO,IAAAM,EAAA,OAAAzG,OAAA0G,EAAA,EAAA1G,CAAAkG,KAAA+B,IACfxB,EAAAzG,OAAA2G,EAAA,EAAA3G,CAAAkG,KAAAlG,OAAA4G,EAAA,EAAA5G,CAAAiI,GAAApB,KAAAX,KAAMC,KAEDzG,MAAQ,CAAEwI,eAAgB,IAHhBzB,yFAUON,EAAOzG,GAAO,IAAAyI,EACFhC,EAAMZ,aAAhCrF,EAD4BiI,EAC5BjI,SAAUC,EADkBgI,EAClBhI,YAEdD,EACAgG,KAAKkC,kBAAkB,cAAe,KAEjCjI,GACL+F,KAAKkC,kBAAkB,YAAa,sCAInC,IAAAC,EACyCnC,KAAKC,MAAMZ,aAAjDlF,EADHgI,EACGhI,eAAgBD,EADnBiI,EACmBjI,kBAChB8H,EAAmBhC,KAAKxG,MAAxBwI,eAER,OACIxG,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CAAMC,GAAI,IAAKjG,UAAU,WAAzB,8BACJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBqG,GAClCxG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAC0G,EAAD,CAAgBnB,UAAU,KAAK9G,eAAgBA,EAAgBD,kBAAmBA,IAClFsB,EAAAC,EAAAC,cAAC0G,EAAD,CAAgBnB,UAAU,KAAK9G,eAAgBA,EAAgBD,kBAAmBA,iDAQpFmI,EAASC,GAAa,IAAAtB,EAAAhB,KAEpCuC,aAAavC,KAAKwC,qBAElBxC,KAAKmB,SAAS,CAACa,eAAgBK,IAC/BrC,KAAKwC,oBAAsBC,WAAW,WAClCzB,EAAKG,SAAS,CAACa,eAAgB,MAChCM,UAlDUlC,IAAMC,WA4DZqC,cANS,SAASjD,GAC7B,MAAO,CACHJ,aAAcI,EAAMJ,eAIbqD,CAAyBX,GC5CzBY,mLAhBP,OACInH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,4EACAF,EAAAC,EAAAC,cAAA,8RACAF,EAAAC,EAAAC,cAAA,uZACAF,EAAAC,EAAAC,cAAA,oIACAF,EAAAC,EAAAC,cAAA,8QACAF,EAAAC,EAAAC,cAAA,kEACAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,mBAbF0E,IAAMC,2BCgEVuC,EA/DG,WACd,IAAIC,EAoDJ,MAAQ,CACJC,YAAa,WAIT,OAHKD,IACDA,EApDZ,WACI,IAAIE,GAAgB,EAGpB,SAASC,EAASzI,GACdkF,EAAMwD,SAAS,CACXpJ,KAAM,qBACNO,QAAS8I,MAAMC,EAAOC,eAAiB7I,GACtC8I,KAAK,SAAAC,GAAQ,OAAIA,EAASC,WAKnC,MAAO,CACHC,iBAAkB,SAAUjJ,GAEpBwI,IACAU,cAAcV,GACdA,GAAgB,EAChBhH,QAAQC,KAAK,uCAIjBgH,EAASzI,GACsB,IAA3B4I,EAAOO,kBACPX,EAAgBY,YAAYX,EAAUG,EAAOO,gBAAiBnJ,IAIlEkF,EAAMwD,SAAS,CACXpJ,KAAM,oBACNO,QAASG,KAGjBqJ,gBAAiB,WAEbH,cAAcV,GACdA,GAAgB,EAGhBtD,EAAMwD,SAAS,CACXpJ,KAAM,oBACNO,QAAS,OAUFyJ,IAERhB,IA1DD,GCuCHiB,mLAvCF,IAAA/D,EACqEC,KAAKC,MAAvErF,EADHmF,EACGnF,KAAMiB,EADTkE,EACSlE,OAAQgC,EADjBkC,EACiBlC,IAAKV,EADtB4C,EACsB5C,MAAOC,EAD7B2C,EAC6B3C,OAAQC,EADrC0C,EACqC1C,MAAO0G,EAD5ChE,EAC4CgE,MAAOvG,EADnDuC,EACmDvC,cAExD,OACIhC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,aAAAJ,OAAeM,IACzBL,EAAAC,EAAAC,cAAA,OAAKC,UAAS,aAAAJ,OAAeM,IACzBL,EAAAC,EAAAC,cAAA,WAAMd,GACNY,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,KAAuBkC,EAAvB,SAGJrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,SAAIyB,IAER3B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SAAI0B,IAER5B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,SAAI2B,KAGZ7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SAAIqI,IAERvI,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SAAI8B,aAhCC4C,IAAMC,WCsCpB2D,mLApCF,IAAAjE,EACsEC,KAAKC,MAAxEnF,EADHiF,EACGjF,WAAYe,EADfkE,EACelE,OAAQoI,EADvBlE,EACuBkE,SAAUF,EADjChE,EACiCgE,MAAOlG,EADxCkC,EACwClC,IAAKV,EAD7C4C,EAC6C5C,MAAOC,EADpD2C,EACoD3C,OAAQC,EAD5D0C,EAC4D1C,MAEjE,OACI7B,EAAAC,EAAAC,cAAA,OAAKC,UAAS,yBAAAJ,OAA2BM,IACrCL,EAAAC,EAAAC,cAAA,OAAKC,UAAS,wBAAAJ,OAA0BM,IACpCL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBsI,EAAjC,IAA4CnJ,IAGhDU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,SAAIqI,IAERvI,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,SAAImC,IAERrC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,SAAIyB,EAAJ,MAAcC,EAAd,MAAyBC,aArBnB+C,IAAMC,WCuErB6D,mLAhEP,IAAIC,EAAkBnE,KAAKoE,uBAAuBpE,KAAKqE,mBAEvD,OACI7I,EAAAC,EAAAC,cAAA,WAASC,UAAU,uBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,iBAEJH,EAAAC,EAAAC,cAAA,WACKyI,mDAMMG,GAAW,IAAAvE,EACgCC,KAAKC,MAA3DsE,EADsBxE,EACtBwE,QAASlG,EADa0B,EACb1B,QAASmG,EADIzE,EACJyE,kBAAmBrH,EADf4C,EACe5C,MAAOC,EADtB2C,EACsB3C,OAEhD+G,EAAkB,GAChBM,EAAY,CAAC,MAAO,MAAO,OAC7BC,EAAU,EAEd,IAAK,IAAI1G,KAAOsG,EAAW,CACvB,IAAIzI,EAASyI,EAAUtG,GAAK,GAE5BmG,EAAgBzC,KACZlG,EAAAC,EAAAC,cAACiJ,EAAD,CACI9C,IAAG,GAAAtG,OAAKgJ,EAAL,KAAAhJ,OAAgBM,GACnBf,WAAYmC,EAA2BoB,EAAQxC,IAC/CA,OAAQA,EACRoI,SAAUQ,EAAUC,KACpBX,MAAOO,EAAUtG,GAAK,GACtBH,IAAK2G,EAAkBjG,WAAW1C,GAClCsB,MAAK,GAAA5B,OAAK+B,EAAsBH,EAAMtB,GAAQ,IAAM,GAA/C,KACLuB,OAAM,GAAA7B,OAAK+B,EAAsBF,EAAOvB,GAAQ,IAAM,GAAhD,KACNwB,MAAOC,EAAsBH,EAAMtB,GAAQuB,EAAOvB,GAAS,MAKvE,OAAOsI,4CAGO,IACNG,EAActE,KAAKC,MAAnBqE,UAEJM,EAAiB,GACrB,IAAK,IAAI5G,KAAOsG,EACZM,EAAelD,KAAK,CAAC1D,EAAKsG,EAAUtG,KAIxC,OAFA4G,EAAeC,KAAK,SAAChG,EAAGiG,GAAJ,OAAUA,EAAE,GAAKjG,EAAE,KAEhC+F,SArDWxE,IAAMC,2BC+BjB0E,mLAnCF,IAAAhF,EACoDC,KAAKC,MAAtDnF,EADHiF,EACGjF,WAAYkK,EADfjF,EACeiF,IAAKC,EADpBlF,EACoBkF,iBAAkBC,EADtCnF,EACsCmF,UACvCC,EACA3J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,SAAIsJ,EAAII,OAAR,KAAoB5J,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,OAAKC,UAAS,oBAAAJ,OAAsB0J,EAAiBG,YAOvF,OAJKF,IACDC,EAAgB,IAIhB3J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,aAAAH,OAAQT,EAAR,OACAU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,SAAIsJ,EAAIK,KAAR,KAAkB7J,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAJ,OAAoB0J,EAAiBI,UAE/E7J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,SAAIsJ,EAAIM,MAAR,KAAmB9J,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,OAAKC,UAAS,mBAAAJ,OAAqB0J,EAAiBK,WAEjF9J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,SAAIsJ,EAAIO,KAAR,KAAkB/J,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAJ,OAAoB0J,EAAiBM,UAE9EJ,UAxBe/E,IAAMC,WCGhCmF,mLAGO,IACGC,EAAmBzF,KAAKC,MAAxBwF,gBAEJC,EAAqB1F,KAAK2F,4BAG9B,OAFA3F,KAAK4F,yBAGDpK,EAAAC,EAAAC,cAAA,WAASC,UAAU,oCACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,qBACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAS,kBAAAJ,OAAoByE,KAAK6F,cAAc,MAAW/D,QAAS,kBAAM2D,EAAgB,OAAlG,WACAjK,EAAAC,EAAAC,cAAA,UAAQC,UAAS,kBAAAJ,OAAoByE,KAAK6F,cAAc,OAAY/D,QAAS,kBAAM2D,EAAgB,QAAnG,YACAjK,EAAAC,EAAAC,cAAA,UAAQC,UAAS,kBAAAJ,OAAoByE,KAAK6F,cAAc,OAAY/D,QAAS,kBAAM2D,EAAgB,QAAnG,aAEJjK,EAAAC,EAAAC,cAAA,WACKgK,wDAMW,IAWpB3K,EAXoBgF,EACKC,KAAKC,MAA1B5B,EADgB0B,EAChB1B,QAASkG,EADOxE,EACPwE,QAEbmB,EAAqB,GACrBI,EAAgBhM,OAAOiM,oBAAoB1H,GAC3C2H,EAAoBhG,KAAK4F,yBACzBV,GAAY,EAMhB,IAJgB,0BAAZX,IACJW,GAAY,GAGPnK,EAAI,EAAGA,EAAI+K,EAAcpM,OAAQqB,IAAK,CACvC,IAAIL,EAASoL,EAAc/K,GACvBkK,EAAmB,CAACI,KAAM,GAAIC,MAAO,GAAIC,KAAM,GAAIH,OAAQ,IAE/D,IAAK,IAAIa,KAAaD,EAAkBtL,GAChCsL,EAAkBtL,GAAQuL,GAAa,EACvChB,EAAiBgB,GAAavL,EAG9BuK,EAAiBgB,GAAa,OAItCP,EAAmBhE,KACflG,EAAAC,EAAAC,cAACwK,EAAD,CACIrE,IAAG,GAAAtG,OAAKyE,KAAKC,MAAMsE,QAAhB,KAAAhJ,OAA2Bb,GAC9BI,WAAYmC,EAA2BoB,EAAQ3D,IAC/CsK,IAAKgB,EAAkBtL,GACvBuK,iBAAkBA,EAClBC,UAAWA,KAKvB,OAAOQ,mDAGc,IAAAS,EACanG,KAAKC,MAA/BnB,EADaqH,EACbrH,WAAYsH,EADCD,EACDC,UAGhBJ,EAAoB,CACpBhJ,IAAK,CACDqI,KAAM,EACNC,MAAO,EACPC,KAAM,EACNH,OAAQ,GAEZzH,KAAM,CACF0H,KAAM,EACNC,MAAO,EACPC,KAAM,EACNH,OAAQ,GAEZ1H,MAAO,CACH2H,KAAM,EACNC,MAAO,EACPC,KAAM,EACNH,OAAQ,IAKZiB,EAAc,IAAIC,KAEtB,IAAK,IAAIL,KAAanH,EAAY,CAC9B,IAAID,EAAIC,EAAWmH,GAGnB,GAFmBI,EAAc,IAAIC,KAAKzH,EAAE0H,cAExBH,EAAY,CAC5B,IAAIrH,EAAQF,EAAEE,MACVlF,EAAOgF,EAAEhF,KAEbmM,EAAkBjH,EAAM9D,eAAepB,EAAKoB,kBAIpD,OAAO+K,wCAIGQ,GACV,OAAQA,IAASxG,KAAKC,MAAMmG,UAAY,wBAA0B,UA5G1ChG,IAAMC,WAgHtCmF,EAAkBiB,UAAY,CAC1BlC,QAASmC,IAAUC,OAAOC,WAC1BvI,QAASqI,IAAUG,OAAOD,WAC1B9H,WAAY4H,IAAUG,OAAOD,WAC7BR,UAAWM,IAAUI,OAAOF,WAC5BnB,gBAAiBiB,IAAUK,KAAKH,YAGrBpB,gBC3HA,SAASwB,EAAiB/G,GAAO,IACpC9C,EAAyD8C,EAAzD9C,MAAO8J,EAAkDhH,EAAlDgH,WAAYC,EAAsCjH,EAAtCiH,YAAaC,EAAyBlH,EAAzBkH,UAAWC,EAAcnH,EAAdmH,UAC3ChK,EAA8D6C,EAA9D7C,OAAQiK,EAAsDpH,EAAtDoH,YAAaC,EAAyCrH,EAAzCqH,aAAcC,EAA2BtH,EAA3BsH,WAAYC,EAAevH,EAAfuH,WAEvD,OACIhM,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,QAAM+L,MAAOR,EAAYS,OAAQR,EAAarI,EAAGsI,EAAWrC,EAAGsC,GAC3D5L,EAAAC,EAAAC,cAAA,uBAAeyB,IAEnB3B,EAAAC,EAAAC,cAAA,QAAM+L,MAAOJ,EAAaK,OAAQJ,EAAczI,EAAG0I,EAAYzC,EAAG0C,GAC9DhM,EAAAC,EAAAC,cAAA,wBAAgB0B,KCVjB,SAASuK,GAAuB1H,GAAO,IAC1C2H,EAAe3H,EAAf2H,KAAMpB,EAASvG,EAATuG,KAEd,OACIhL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBACTH,EAAAC,EAAAC,cAAA,QAAM+L,MAAM,MAAMC,OAAO,KAAK7I,EAAC,GAAAtD,OAAKqM,EAAL,KAAc9C,EAAE,QAC/CtJ,EAAAC,EAAAC,cAAA,QAAMmD,EAAC,GAAAtD,OAAKqM,EAAK,EAAV,KAAgB9C,EAAE,QAAQ0B,ICD9B,SAASqB,GAAkB5H,GAAO,IAAA6H,EACHC,mBAAS,IADNC,EAAAlO,OAAAmO,EAAA,EAAAnO,CAAAgO,EAAA,GACrCI,EADqCF,EAAA,GACvBG,EADuBH,EAAA,GAGvCI,EAsBV,SAAsBC,EAAMC,EAAmBH,GAC3C,IAAII,EAAW,GACXH,EAAY,GAEZF,EAAe,GAIfM,EAAcH,EAAK3O,OALT,EAMV8O,EAAc,IAAKA,EAAc,GAGrC,IAAK,IAAIzN,EAAIyN,EAAazN,EAAIsN,EAAK3O,OAAQqB,IACvCwN,EAAS7G,KACL,CAAC2G,EAAKtN,GAAG,GAAKsN,EAAKtN,EAAE,GAAG,GAAIsN,EAAKtN,GAAG,GAAKsN,EAAKtN,EAAE,GAAG,KAK3D,IAAK,IAAIA,EAAI,EAAGA,EAAIwN,EAAS7O,OAAQqB,IAC7BwN,EAASxN,GAAG,GAAKmN,IAAeA,EAAeK,EAASxN,GAAG,IAC3DwN,EAASxN,GAAG,GAAKmN,IAAeA,EAAeK,EAASxN,GAAG,IAI/DuN,IAAsBJ,GACtBC,EAAgBD,GAIpB,IAAK,IAAInN,EAAI,EAAGA,EAAIwN,EAAS7O,OAAQqB,IAAK,CAEtC,IAAI0N,EAAkBF,EAASxN,GAAG,GAAKmN,EAAe,GAClDQ,EAAmBH,EAASxN,GAAG,GAAKmN,EAAe,GAG/B,IAApBO,IAAyBA,EAAkB,GACtB,IAArBC,IAAyBA,EAAmB,GAEhDN,EAAU1G,KACNlG,EAAAC,EAAAC,cAACsL,EAAD,CACInF,IAAG,aAAAtG,OAAeR,GAClBoC,MAAOoL,EAASxN,GAAG,GACnBkM,WAAY,KACZC,YAAW,GAAA3L,OAAKkN,EAAL,KACXtB,UAAS,GAAA5L,OAAK,GAAK,GAAIR,EAAd,KACTqM,UAAS,GAAA7L,OAAK,GAAKkN,EAAV,KACTrL,OAAQmL,EAASxN,GAAG,GACpBsM,YAAa,KACbC,aAAY,GAAA/L,OAAKmN,EAAL,KACZnB,WAAU,GAAAhM,OAAK,GAAK,GAAIR,EAAd,KACVyM,WAAU,GAAAjM,OAAK,GAAKmN,EAAV,QAKtB,OAAON,EA9EWO,CADD1I,EAAToI,KAC6BH,EAAcC,GAG7CS,EA+EV,SAA6BC,EAAmBC,EAAgBC,GAK5D,IAJA,IAAIH,EAAa,GACbI,EAAQ,GAGHjO,EAAI,EAAI8N,EAAmB9N,EAAI,EAAGA,IACvCiO,EAAMtH,KAAKqH,EAAoBhO,IAGnC,IAAK,IAAIA,EAAIiO,EAAMtP,OAAQqB,EAAI,EAAGA,IAC9BiO,EAAMtH,KAAK,IAGf,IAAK,IAAI3G,EAAI,EAAGA,EAAI,EAAGA,IACnB6N,EAAWlH,KACPlG,EAAAC,EAAAC,cAACiM,GAAD,CACI9F,IAAK,cAAgB9G,EACrB6M,KAAMkB,EAAe/N,GACrByL,KAAMwC,EAAMjO,MAKxB,OAAO6N,EAtGYK,CAAmBb,EAAU1O,OADzB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IADnB,CAAC,QAAS,MAAO,QAAS,MAAO,OAAQ,OAKlE,OACI8B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBACTH,EAAAC,EAAAC,cAAA,QAAM+L,MAAM,MAAMC,OAAO,MAAM7I,EAAE,OAAOiG,EAAE,QAC1CtJ,EAAAC,EAAAC,cAAA,QAAMmD,EAAE,MAAMiG,EAAE,OAAhB,KACAtJ,EAAAC,EAAAC,cAAA,QAAM+L,MAAM,MAAMC,OAAO,MAAM7I,EAAE,OAAOiG,EAAE,QAC1CtJ,EAAAC,EAAAC,cAAA,QAAMmD,EAAE,KAAKiG,EAAE,OAAOoD,IAEzBE,EACD5M,EAAAC,EAAAC,cAAA,SACKkN,ICpBF,SAASM,GAAoBjJ,GAAO,IACvCnF,EAAsBmF,EAAtBnF,WAAYqC,EAAU8C,EAAV9C,MAEpB,OACI3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,aAAAH,OAAQT,EAAR,OACAU,EAAAC,EAAAC,cAACmM,GAAD,CAAmBlM,UAAU,mCAAmC0M,KAAMlL,KCLnE,SAASgM,GAAalJ,GAAO,IAElCmJ,EAiBV,SAAgC/K,EAASlB,GAErC,IAIIpC,EAJAqO,EAAuB,GACvBtD,EAAgBhM,OAAOiM,oBAAoB1H,GAI/C,IAAKtD,EAAI,EAAGA,EAAI+K,EAAcpM,OAAQqB,IAAK,CACvC,IAAIc,EAASiK,EAAc/K,GAE3BqO,EAAqB1H,KACjBlG,EAAAC,EAAAC,cAACwN,GAAD,CACIrH,IAAK,uBAAyBhG,EAC9Bf,WAAYmC,EAA2BoB,EAAQxC,IAC/CsB,MAAOA,EAAMtB,MAKzB,OAAOuN,EApCsBC,CADFpJ,EAAnB5B,QAAmB4B,EAAV9C,OAGjB,OACI3B,EAAAC,EAAAC,cAAA,WAASC,UAAU,oCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,2BAEJH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAb,kFAEJH,EAAAC,EAAAC,cAAA,WACK0N,IJFrBpC,EAAiBP,UAAY,CACzBtJ,MAAOuJ,IAAUI,OAAOF,WACxBK,WAAYP,IAAUC,OAAOC,WAC7BM,YAAaR,IAAUC,OAAOC,WAC9BO,UAAWT,IAAUC,OAAOC,WAC5BQ,UAAWV,IAAUC,OAAOC,WAC5BxJ,OAAQsJ,IAAUI,OAAOF,WACzBS,YAAaX,IAAUC,OAAOC,WAC9BU,aAAcZ,IAAUC,OAAOC,WAC/BW,WAAYb,IAAUC,OAAOC,WAC7BY,WAAYd,IAAUC,OAAOC,YCfjCe,GAAuBlB,UAAY,CAC/BmB,KAAMlB,IAAUI,OAAOF,WACvBJ,KAAME,IAAUC,QCyGpBkB,GAAkBpB,UAAY,CAC1B4B,KAAM3B,IAAU4C,MAAM1C,WACtB2C,YAAa7C,IAAUK,KAAKH,YCzGhCsC,GAAoBzC,UAAY,CAC5B3L,WAAY4L,IAAUC,OAAOC,WAC7BzJ,MAAOuJ,IAAU4C,MAAM1C,YC6B3BuC,GAAa1C,UAAY,CACrBtJ,MAAOuJ,IAAUG,OAAOD,gBCzCtB4C,eACF,SAAAA,EAAYvJ,GAAO,IAAAM,EAAA,OAAAzG,OAAA0G,EAAA,EAAA1G,CAAAkG,KAAAwJ,IACfjJ,EAAAzG,OAAA2G,EAAA,EAAA3G,CAAAkG,KAAAlG,OAAA4G,EAAA,EAAA5G,CAAA0P,GAAA7I,KAAAX,KAAMC,KAEDzG,MAAQ,CAACiQ,iBAAkBxM,EAAiCsD,EAAKN,MAAMpE,OAAQ0E,EAAKN,MAAMyJ,QAAQ5N,OAHxFyE,wEAMV,IAAAR,EAC+EC,KAAKC,MAAjFsE,EADHxE,EACGwE,QAAS1I,EADZkE,EACYlE,OAAQ6N,EADpB3J,EACoB2J,QAASlF,EAD7BzE,EAC6ByE,kBAAmB4B,EADhDrG,EACgDqG,UAAWX,EAD3D1F,EAC2D0F,gBACxDgE,EAAqBzJ,KAAKxG,MAA1BiQ,iBAER,OACIjO,EAAAC,EAAAC,cAAA,OAAKC,UAAS,aAAAJ,OAAeM,IACzBL,EAAAC,EAAAC,cAAA,OAAKC,UAAS,aAAAJ,OAAeM,IACzBL,EAAAC,EAAAC,cAAA,UAAK6I,IAET/I,EAAAC,EAAAC,cAACiO,EAAD,CACIpF,QAASA,EACTlG,QAASqL,EAAQ7M,OACjByH,UAAWoF,EAAQ3M,WAAW2M,EAAQ3M,WAAWrD,OAAO,GAAGkQ,WAAWH,GAAkB3M,OACxF0H,kBAAmBA,EACnBrH,MAAOuM,EAAQ5N,KAAK2N,GAAkBtM,MACtCC,OAAQsM,EAAQ5N,KAAK2N,GAAkBrM,SAE3C5B,EAAAC,EAAAC,cAACmO,EAAD,CACItF,QAASA,EACTlG,QAASqL,EAAQ7M,OACjBiC,WAAY4K,EAAQ5N,KAAK2N,GAAkB3K,WAC3CsH,UAAWA,EACXX,gBAAiBA,IAErBjK,EAAAC,EAAAC,cAACyN,GAAD,CACI9K,QAASqL,EAAQ7M,OACjBM,MAAOqH,EAAkBvF,sDAOrC,IAAIwK,EAAmBxM,EAAiC+C,KAAKC,MAAMpE,OAAQmE,KAAKC,MAAMyJ,QAAQ5N,MAC1FkE,KAAKxG,MAAMiQ,mBAAqBA,GAChCzJ,KAAKmB,SAASsI,UA1CDrJ,IAAMC,WA8DhBqC,eANS,SAASjD,GAC7B,MAAO,CACHiK,QAASjK,EAAMH,eAIRoD,CAAyB8G,IC5DlCM,eACF,SAAAA,EAAY7J,GAAO,IAAAM,EAAA,OAAAzG,OAAA0G,EAAA,EAAA1G,CAAAkG,KAAA8J,IACfvJ,EAAAzG,OAAA2G,EAAA,EAAA3G,CAAAkG,KAAAlG,OAAA4G,EAAA,EAAA5G,CAAAgQ,GAAAnJ,KAAAX,KAAMC,KACDzG,MAAQ,CACTuQ,cAAe,GACf3D,UAAW,MAGf7F,EAAKkF,gBAAkBlF,EAAKkF,gBAAgB1E,KAArBjH,OAAAkQ,EAAA,EAAAlQ,QAAAkQ,EAAA,EAAAlQ,CAAAyG,KAPRA,mFAYf,IAAIhG,EAAa0C,EAA2B+C,KAAKC,MAAM3G,MAAM2Q,OAAOnP,YAGnDoP,EAAWpH,cACjBU,iBAAiBjJ,GAE5ByF,KAAKmB,SAAS,CAAC4I,cAAexP,iDAK9B,IAAIA,EAAa0C,EAA2B+C,KAAKC,MAAM3G,MAAM2Q,OAAOnP,YAEpE,GAAIP,IAAeyF,KAAKxG,MAAMuQ,cAAc,CAExC/J,KAAKmB,SAAS,CAAC4I,cAAexP,IAE9B,IAAIqI,EAAasH,EAAWpH,cAC5BF,EAAWgB,kBACXhB,EAAWY,iBAAiBjJ,mDAOf2P,EAAWpH,cACbc,mDAIV,IACGvE,EAAiBW,KAAKC,MAAtBZ,aAGR,GAAIA,EAAapF,YACb,OAAOuB,EAAAC,EAAAC,cAAA,2GAIX,IAAK2D,EAAanF,kBACd,OAAOsB,EAAAC,EAAAC,cAAA,8FAIX,IAAIyO,EAAkBnK,KAAKoK,yBACvBC,EAAarK,KAAKsK,oBAEtB,OACI9O,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACVwO,GAEL3O,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACV0O,qDAOQ,IAKjBtP,EALiBgF,EACkCC,KAAKC,MAApDyJ,EADa3J,EACb2J,QAASa,EADIxK,EACJwK,eAAgB/F,EADZzE,EACYyE,kBAC7BsB,EAAgBhM,OAAOiM,oBAAoB2D,EAAQ7M,QACnD2N,EAAY,GAGhB,IAAKzP,EAAI,EAAGA,EAAI+K,EAAcpM,OAAQqB,IAAK,CACvC,IAII0P,EAJA5O,EAASiK,EAAc/K,GACvBL,EAAS6P,EAAe1O,GAI5BnB,EAAOmD,IAAM,EACb,IAAI/B,EAAOhC,OAAOiM,oBAAoBvB,GACtC,IAAKiG,EAAI,EAAGA,EAAI3O,EAAKpC,OAAQ+Q,IACzB/P,EAAOmD,KAAO2G,EAAkB1I,EAAK2O,IAAIlM,WAAW1C,GAGxD2O,EAAU9I,KACNlG,EAAAC,EAAAC,cAACgP,EAAD,CACI7I,IAAKhG,EACLjB,KAAMF,EAAOE,KACbiB,OAAQA,EACRgC,IAAKnD,EAAOmD,IACZV,MAAOG,EAA+B5C,EAAOyC,OAC7CC,OAAQE,EAA+B5C,EAAO0C,QAC9CC,MAAOC,EAA+B5C,EAAO2C,OAC7C0G,MAAOzG,EAA+B5C,EAAO6C,eAC7CC,cAAe9C,EAAO8C,iBAIlC,OAAOgN,8CAGS,IAAArE,EACuBnG,KAAKC,MAApCyJ,EADQvD,EACRuD,QAASlF,EADD2B,EACC3B,kBACT4B,EAAcpG,KAAKxG,MAAnB4M,UACJiE,EAAa,GAGjBA,EAAW3I,KACPlG,EAAAC,EAAAC,cAACiP,GAAD,CACI9I,IAAI,IACJ0C,QAAQ,wBACR1I,OAAO,OACP2I,kBAAmBA,EAAkBlG,qBACrC8H,UAAWA,EACXX,gBAAiBzF,KAAKyF,mBAK9B,IACI1K,EADA+K,EAAgBhM,OAAOiM,oBAAoB2D,EAAQ7M,QAEvD,IAAK9B,EAAI,EAAGA,EAAI+K,EAAcpM,OAAQqB,IAAK,CACvC,IAAIc,EAASiK,EAAc/K,GAE3BsP,EAAW3I,KACPlG,EAAAC,EAAAC,cAACiP,GAAD,CACI9I,IAAK6H,EAAQ7M,OAAOhB,GACpB0I,QAAO,GAAAhJ,OAAK0B,EAA2ByM,EAAQ7M,OAAOhB,IAA/C,eACPA,OAAQA,EACR2I,kBAAmBA,EAAiB,GAAAjJ,OAAIM,EAAJ,eACpCuK,UAAWA,EACXX,gBAAiBzF,KAAKyF,mBAMlC,OAAO4E,0CAGKjE,GACZpG,KAAKmB,SAAS,CAACiF,qBAtJOhG,IAAMC,WAmKrBqC,eATS,SAASjD,GAC7B,MAAO,CACHJ,aAAcI,EAAMJ,aACpBqK,QAASjK,EAAMH,aACfiL,eAAgB9K,EAAMF,oBACtBiF,kBAAmB/E,EAAMD,yBAIlBkD,CAAyBoH,IClKpCc,GAAApP,EAAAC,EAAAC,cAACmP,EAAA,EAAD,CAAeC,SAAS,oBACpBtP,EAAAC,EAAAC,cAACqP,EAAA,SAAD,KACIvP,EAAAC,EAAAC,cAACsP,EAAD,MACAxP,EAAAC,EAAAC,cAACuP,EAAA,EAAD,KACIzP,EAAAC,EAAAC,cAACwP,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWzI,EAAM0I,OAAK,IAD1C,IAEI7P,EAAAC,EAAAC,cAACwP,EAAA,EAAD,CAAOC,KAAK,eAAeC,UAAWtB,KACtCtO,EAAAC,EAAAC,cAACwP,EAAA,EAAD,CAAOE,UAAWzI,aCVlC2I,IAASC,OACL/P,EAAAC,EAAAC,cAAC8P,EAAA,EAAD,CAAU/L,MAAOA,GAASmL,IAC1Ba,SAASC,eAAe,S3BuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxI,KAAK,SAAAyI,GACjCA,EAAaC","file":"static/js/main.2d8a2bc3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const displayStateReducer = function(state={}, action) {\r\n    switch (action.type) {\r\n        case \"FETCH_MATCHUP_DATA_PENDING\": {\r\n            return {\r\n                ...state,\r\n                fetching: true,\r\n                fetchFailed: false\r\n            };\r\n        }\r\n        case \"FETCH_MATCHUP_DATA_FULFILLED\": {\r\n            return {\r\n                ...state, \r\n                firstFetchSuccess: true,\r\n                fetching: false\r\n            };\r\n        }\r\n        case \"FETCH_MATCHUP_DATA_REJECTED\": {\r\n            return {\r\n                ...state, \r\n                fetching: false,\r\n                fetchFailed: true\r\n            };\r\n        }\r\n        case \"SELECT_NEW_SERVER\": {\r\n            return {\r\n                ...state,\r\n                firstFetchSuccess: false,\r\n                selectedServer: action.payload\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport default displayStateReducer;","const fullAPIStateReducer = function(state={}, action) {\r\n    switch (action.type) {\r\n        case \"FETCH_MATCHUP_DATA_FULFILLED\": {\r\n            return action.payload;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport default fullAPIStateReducer;","import React from 'react';\r\nimport serverCodes from './serverCodes.json';\r\n\r\n//Get server name from server code\r\nexport function getNameByCode(serverCode) {\r\n    return serverCodes.find( server => server.id === serverCode).name;\r\n}\r\n\r\n\r\n//Get server code from server name\r\nexport function getCodeByName(serverName) {\r\n    var serverCode = '';\r\n    var lowercaseServerName = serverName.toLowerCase();\r\n\r\n    var i;\r\n    for (i = 0; i < serverCodes.length; i++) {\r\n        if (serverCodes[i].name.toLowerCase() === lowercaseServerName) {\r\n            serverCode = serverCodes[i].id\r\n            return serverCode.toString();\r\n        }\r\n    }\r\n    return serverName;\r\n}\r\n\r\n//Display the server names in a human way\r\nexport function formatServerNames(primaryServer, allServers) {\r\n    var linkServers = '';\r\n\r\n    //Form a string of the linked server(s) with \"&\" between them if multiple\r\n    var i;\r\n    for (i = 0; i < allServers.length; i++) {\r\n        if (allServers[i] !== primaryServer) {\r\n            if (linkServers !== '') {\r\n                linkServers = '& '\r\n            }\r\n            linkServers = linkServers + getNameByCode(allServers[i]);\r\n        }\r\n    }\r\n\r\n    //Return server name with links if applicable\r\n    primaryServer = getNameByCode(primaryServer);\r\n\r\n    if (allServers.length > 1) {\r\n        linkServers = ` (linked with ${linkServers})`;\r\n    }\r\n    \r\n    return (\r\n        <div className=\"row-fixed\">\r\n            <h2>{primaryServer}<span>{linkServers}</span></h2>\r\n        </div>); \r\n}\r\n\r\n//Find which position in the array the desired map is in. Requires a colour and the API.maps object.\r\n\r\n/** Find which position in the array the desired map is in.\r\n * Requires a colour and the API.maps object.\r\n * \r\n * @param {string} colour \r\n * @param {object} maps \r\n */\r\nexport function getMapArrayPosition(colour, maps) {\r\n\r\n    if (colour === \"grey\") {\r\n        let i;\r\n        for (i = 0; i < maps.length; i++) {\r\n            if (\"Center\" === maps[i].type) {\r\n                return i;\r\n            }\r\n        }\r\n    } else {\r\n        let i;\r\n        for (i = 0; i < maps.length; i++) {\r\n            if (`${colour}home` === maps[i].type.toLowerCase()) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    console.warn(\"Was not able to find map in API.maps: \" + colour);\r\n}","import * as serverHelper from './serverHelper';\r\n\r\nexport function round(value, decimals) {\r\n    return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\r\n}\r\n\r\nexport function beautifyNumber(num) {\r\n    if (num >= 10000) {\r\n        var parts = num.toString().split(\".\");\r\n        parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n        return parts.join(\".\");\r\n    }\r\n    return num;\r\n}\r\n\r\nexport function calculatePPT(maps) {\r\n    var servers = [\"red\", \"green\", \"blue\"];\r\n\r\n    var calculatedPPT = {\r\n        eternalBattlegrounds: {\r\n            currentPPT: {}\r\n        },\r\n        redBorderland: {\r\n            currentPPT: {}\r\n        },\r\n        greenBorderland: {\r\n            currentPPT: {}\r\n        },\r\n        blueBorderland: {\r\n            currentPPT: {}\r\n        }\r\n    };\r\n\r\n    var i;\r\n    for (i = 0; i < 3; i++) {\r\n        calculatedPPT.eternalBattlegrounds.currentPPT[servers[i]] = totalMapPPT(serverHelper.getMapArrayPosition(\"grey\", maps), servers[i])\r\n    }\r\n    for (i = 0; i < 3; i++) {\r\n        calculatedPPT.redBorderland.currentPPT[servers[i]] = totalMapPPT(serverHelper.getMapArrayPosition(\"red\", maps), servers[i])\r\n    }\r\n    for (i = 0; i < 3; i++) {\r\n        calculatedPPT.greenBorderland.currentPPT[servers[i]] = totalMapPPT(serverHelper.getMapArrayPosition(\"green\", maps), servers[i])\r\n    }\r\n    for (i = 0; i < 3; i++) {\r\n        calculatedPPT.blueBorderland.currentPPT[servers[i]] = totalMapPPT(serverHelper.getMapArrayPosition(\"blue\", maps), servers[i])\r\n    }\r\n    \r\n\r\n    function totalMapPPT (mapI, server) {\r\n        var objectives = maps[mapI].objectives;\r\n        var totalMapPPT = 0;\r\n        \r\n        var x;\r\n        for (x = 0; x < objectives.length; x++) {\r\n            if (objectives[x].owner.toLowerCase() === server) {\r\n                totalMapPPT += objectives[x].points_tick;\r\n            }\r\n        }\r\n\r\n        return totalMapPPT;\r\n    }\r\n\r\n    return calculatedPPT;\r\n}","import * as serverHelper from '../helpers/serverHelper';\r\nimport * as analyticsHelper from '../helpers/analyticsHelper';\r\n\r\nconst serverOverviewStateReducer = function(state = {}, action) {\r\n    switch (action.type) {\r\n        case \"FETCH_MATCHUP_DATA_FULFILLED\": {\r\n            if (!action.payload.worlds) { console.warn(\"Server code not found.\") }\r\n\r\n            //Get the score from the most recent skirmish (ultimate entry in skirmishes[] )\r\n            var scores = action.payload.skirmishes[action.payload.skirmishes.length - 1].scores;\r\n            return {\r\n                ...state,\r\n                red: {\r\n                    ...state.red,\r\n                    name: serverHelper.formatServerNames(action.payload.worlds.red, action.payload.all_worlds.red),\r\n                    kills: action.payload.kills.red,\r\n                    deaths: action.payload.deaths.red,\r\n                    ratio: analyticsHelper.round(action.payload.kills.red / action.payload.deaths.red, 2),\r\n                    skirmishScore: scores.red,\r\n                    victoryPoints: action.payload.victory_points.red\r\n                },\r\n                green: {\r\n                    ...state.green,\r\n                    name: serverHelper.formatServerNames(action.payload.worlds.green, action.payload.all_worlds.green),\r\n                    kills: action.payload.kills.green,\r\n                    deaths: action.payload.deaths.green,\r\n                    ratio: analyticsHelper.round(action.payload.kills.green / action.payload.deaths.green, 2),\r\n                    skirmishScore: scores.green,\r\n                    victoryPoints: action.payload.victory_points.green\r\n                },\r\n                blue: {\r\n                    ...state.blue,\r\n                    name: serverHelper.formatServerNames(action.payload.worlds.blue, action.payload.all_worlds.blue),\r\n                    kills: action.payload.kills.blue,\r\n                    deaths: action.payload.deaths.blue,\r\n                    ratio: analyticsHelper.round(action.payload.kills.blue / action.payload.deaths.blue, 2),\r\n                    skirmishScore: scores.blue,\r\n                    victoryPoints: action.payload.victory_points.blue\r\n                }\r\n            }\r\n        }\r\n        //Potentially obsolete\r\n        case \"UPDATE_PPT\": {\r\n            console.log(\"updating ppt\");\r\n            return {\r\n                ...state,\r\n                red: {\r\n                    ...state,\r\n                    ppt: action.payload\r\n                }   \r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport default serverOverviewStateReducer;","import * as analyticsHelper from '../helpers/analyticsHelper';\r\n\r\nconst activityAnalyticsStateReducer = function(state={}, action) {\r\n    switch (action.type) {\r\n        case \"FETCH_MATCHUP_DATA_FULFILLED\": {\r\n            //Find the maps in the array and save them for easy access.\r\n            let ebgMap = action.payload.maps.find(map => {return map.type === \"Center\"});\r\n            let redMap = action.payload.maps.find(map => {return map.type === \"RedHome\"});\r\n            let greenMap = action.payload.maps.find(map => {return map.type === \"GreenHome\"});\r\n            let blueMap = action.payload.maps.find(map => {return map.type === \"BlueHome\"});\r\n\r\n            var calculatedPPT = analyticsHelper.calculatePPT(action.payload.maps);\r\n            return {\r\n                ...state,\r\n                eternalBattlegrounds: {\r\n                    ...state.eternalBattlegrounds,\r\n                    currentPPT: calculatedPPT.eternalBattlegrounds.currentPPT,\r\n                    kd: {\r\n                        ...state.eternalBattlegrounds.kd,\r\n                        red: [...state.eternalBattlegrounds.kd.red, [ebgMap.kills.red, ebgMap.deaths.red]],\r\n                        green: [...state.eternalBattlegrounds.kd.green, [ebgMap.kills.green, ebgMap.deaths.green]],\r\n                        blue: [...state.eternalBattlegrounds.kd.blue, [ebgMap.kills.blue, ebgMap.deaths.blue]]\r\n                    }\r\n                },\r\n                redBorderland: {\r\n                    ...state.redBorderland,\r\n                    currentPPT: calculatedPPT.redBorderland.currentPPT,\r\n                    kd: {\r\n                        ...state.redBorderland.kd,\r\n                        red: [...state.redBorderland.kd.red, [redMap.kills.red, redMap.deaths.red]],\r\n                        green: [...state.redBorderland.kd.green, [redMap.kills.green, redMap.deaths.green]],\r\n                        blue: [...state.redBorderland.kd.blue, [redMap.kills.blue, redMap.deaths.blue]]\r\n                    }\r\n                },\r\n                greenBorderland: {\r\n                    ...state.greenBorderland,\r\n                    currentPPT: calculatedPPT.greenBorderland.currentPPT,\r\n                    kd: {\r\n                        ...state.greenBorderland.kd,\r\n                        red: [...state.greenBorderland.kd.red, [greenMap.kills.red, greenMap.deaths.red]],\r\n                        green: [...state.greenBorderland.kd.green, [greenMap.kills.green, greenMap.deaths.green]],\r\n                        blue: [...state.greenBorderland.kd.blue, [greenMap.kills.blue, greenMap.deaths.blue]]\r\n                    }\r\n                },\r\n                blueBorderland: {\r\n                    ...state.blueBorderland,\r\n                    currentPPT: calculatedPPT.blueBorderland.currentPPT,\r\n                    kd: {\r\n                        ...state.blueBorderland.kd,\r\n                        red: [...state.blueBorderland.kd.red, [blueMap.kills.red, blueMap.deaths.red]],\r\n                        green: [...state.blueBorderland.kd.green, [blueMap.kills.green, blueMap.deaths.green]],\r\n                        blue: [...state.blueBorderland.kd.blue, [blueMap.kills.blue, blueMap.deaths.blue]]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport default activityAnalyticsStateReducer;","import { combineReducers } from 'redux';\r\n\r\n//Reducers\r\nimport displayStateReducer from './displayStateReducer';\r\nimport fullAPIStateReducer from './fullAPIStateReducer';\r\nimport serverOverviewStateReducer from './serverOverviewStateReducer';\r\nimport activityAnalyticsStateReducer from './activityAnalyticsStateReducer';\r\n\r\n//Combine Reducers\r\nvar reducers = combineReducers({\r\n    displayState: displayStateReducer,\r\n    fullAPIState: fullAPIStateReducer,\r\n    serverOverviewState: serverOverviewStateReducer,\r\n    activityAnalyticsState: activityAnalyticsStateReducer\r\n});\r\n\r\nexport default reducers;","import { applyMiddleware, createStore } from 'redux';\r\nimport reducers from './reducers';\r\nimport logger from 'redux-logger';\r\nimport promise from 'redux-promise-middleware';\r\n\r\nconst initialState = {\r\n    displayState: {\r\n        selectedServer: '',\r\n        firstFetchSuccess: false,\r\n        fetching: false,\r\n        fetchFailed: false\r\n    },\r\n    fullAPIState: {},\r\n    serverOverviewState: {\r\n        red: {\r\n            name: \"Red Server\",\r\n            ppt: 999,\r\n            kills: 0,\r\n            deaths: 0,\r\n            ratio: 0,\r\n            skirmishScore: 0,\r\n            victoryPoints: 0\r\n        },\r\n        green: {\r\n            name: \"Green Server\",\r\n            ppt: 999,\r\n            kills: 0,\r\n            deaths: 0,\r\n            ratio: 0,\r\n            skirmishScore: 0,\r\n            victoryPoints: 0\r\n        },\r\n        blue: {\r\n            name: \"Blue Server\",\r\n            ppt: 999,\r\n            kills: 0,\r\n            deaths: 0,\r\n            ratio: 0,\r\n            skirmishScore: 0,\r\n            victoryPoints: 0\r\n        }\r\n    },\r\n    activityAnalyticsState: {\r\n        eternalBattlegrounds: {\r\n            currentPPT: {\r\n                red: 0,\r\n                green: 0,\r\n                blue: 0\r\n            },\r\n            kd: {\r\n                red: [],\r\n                green: [],\r\n                blue: []\r\n            }\r\n        },\r\n        redBorderland: {\r\n            currentPPT: {\r\n                red: 0,\r\n                green: 0,\r\n                blue: 0\r\n            },\r\n            kd: {\r\n                red: [],\r\n                green: [],\r\n                blue: []\r\n            }\r\n        },\r\n        greenBorderland: {\r\n            currentPPT: {\r\n                red: 0,\r\n                green: 0,\r\n                blue: 0\r\n            },\r\n            kd: {\r\n                red: [],\r\n                green: [],\r\n                blue: []\r\n            }\r\n        },\r\n        blueBorderland: {\r\n            currentPPT: {\r\n                red: 0,\r\n                green: 0,\r\n                blue: 0\r\n            },\r\n            kd: {\r\n                red: [],\r\n                green: [],\r\n                blue: []\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst store = createStore(reducers, initialState, applyMiddleware(logger, promise()));\r\n\r\nexport default store;","import React from 'react';\r\n\r\nclass DropdownButton extends React.Component{\r\n    render() {\r\n        const { buttonText, dropdownContent } = this.props;\r\n\r\n        return (\r\n            <div className=\"dropdown-container\">\r\n                <button className=\"btn-dropdown btn-white\">{buttonText}</button>\r\n                <div className=\"dropdown-content\">\r\n                    {dropdownContent}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default DropdownButton;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport DropdownButton from './DropdownButton';\r\n\r\nimport serverCodes from '../../helpers/serverCodes.json';\r\n\r\nclass ServerSelector extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            serverList: [],\r\n            filteredServers: []\r\n        }\r\n\r\n        this.handleClick = this.handleClick.bind();\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { continent } = this.props;\r\n        var filteredServers = [];\r\n        \r\n\r\n        //Make a new list of continent specific servers\r\n        if (continent === \"EU\") {\r\n            filteredServers = serverCodes.filter(server => server.id >= 2000);\r\n        } else if (continent === \"NA\") {\r\n            filteredServers = serverCodes.filter(server => server.id < 2000);\r\n        } else {\r\n            filteredServers = serverCodes;\r\n            console.warn(\"Continent for ServerSelector not set correctly\");\r\n        }\r\n\r\n        this.setState({filteredServers}, () => this.compileDropdownMenu());\r\n        \r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.selectedServer !== this.props.selectedServer) {\r\n            this.compileDropdownMenu();\r\n        }\r\n    }\r\n\r\n    //If firstFetchSuccess is false, the dropdrown menu won't show. \r\n    //The usefulness for this is that changing selected server sets this to false until the data is in, causing the menu you close.\r\n    render() {\r\n        return <DropdownButton buttonText={this.props.continent} dropdownContent={this.state.serverList}/>\r\n    }\r\n\r\n    handleClick() {\r\n        this.setState({serverList: []});\r\n    }\r\n\r\n    compileDropdownMenu() {\r\n        //Creates an array of links for the dropdown menu, highlighting the currently selected server\r\n        var serverList = [];\r\n        var i;\r\n        for (i = 0; i < this.state.filteredServers.length; i++) {\r\n            var server = this.state.filteredServers[i];\r\n            \r\n\r\n            if (server.id.toString() === this.props.selectedServer) {\r\n                serverList.push(\r\n                    <Link to={\"#\"} key={\"dropdown \" + server.id} className=\"dropdown-active\">{server.name}</Link>\r\n                );\r\n            } else {\r\n                serverList.push(\r\n                    <Link to={\"/\" + server.id} key={\"dropdown \" + server.id} onClick={() => this.handleClick()}>{server.name}</Link>\r\n                );\r\n            }\r\n        }\r\n\r\n\r\n\r\n        this.setState({serverList});\r\n    }\r\n}\r\n\r\nexport default ServerSelector;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport ServerSelector from './ServerSelector';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = { displayMessage: \"\"};\r\n\r\n        // eslint-disable-next-line\r\n        var displayMessageTimer;\r\n    }\r\n\r\n    //Check for messages to display or to clear.\r\n    componentWillReceiveProps(props, state) {\r\n        const { fetching, fetchFailed } = props.displayState;\r\n\r\n        if (fetching) {\r\n            this.setDisplayMessage(\"updating...\", 1000);\r\n        }\r\n        else if (fetchFailed) {\r\n            this.setDisplayMessage(\"failed...\", 9000);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { selectedServer, firstFetchSuccess } = this.props.displayState;\r\n        const { displayMessage } = this.state;\r\n\r\n        return (\r\n            <header className=\"header\">\r\n                <h1><Link to={\"/\"} className=\"reset-a\">Guild Wars 2 WvW Overview</Link></h1>\r\n                <div className=\"display-message\">{displayMessage}</div>\r\n                <nav>\r\n                    <div className=\"btn-container\">\r\n                        <br/>\r\n                        <h2>Select world:&nbsp;</h2>\r\n                        <ServerSelector continent=\"EU\" selectedServer={selectedServer} firstFetchSuccess={firstFetchSuccess}/>\r\n                        <ServerSelector continent=\"NA\" selectedServer={selectedServer} firstFetchSuccess={firstFetchSuccess}/>\r\n                    </div>\r\n                </nav>\r\n                \r\n            </header>\r\n        )\r\n    }\r\n\r\n    setDisplayMessage(message, displayTime) {\r\n\r\n        clearTimeout(this.displayMessageTimer);\r\n\r\n        this.setState({displayMessage: message});\r\n        this.displayMessageTimer = setTimeout(() => {\r\n            this.setState({displayMessage: \"\"});\r\n        }, displayTime);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = function(store) {\r\n    return {\r\n        displayState: store.displayState\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Header);","import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"home\">\r\n                <br/><br/>\r\n                <h1>Introduction</h1>\r\n                <p>Welcome to my Guild Wars 2 world versus world overview web app.</p>\r\n                <p>This app will show you the key details of the week long match up between the selected world (game server) and its two opponents. Low population worlds are often linked with other worlds and where this is the case the app with display \"Primary Server\" with \"Linked Servers\".</p>\r\n                <p>The goal of this app is to show how active each of the four maps in the match up are without having to log in. To measure activity the app displays basic information about the map including the PPT (points per tick) which reflects how much of the map is under a world's control; objectives gained which shows which objectives have recently been captured by whom; and a kills and deaths tracker.</p>\r\n                <p>Kills and deaths are tracked from when you click on a match up so start blank before filling in in 30 second intervals.</p>\r\n                <p>Whether or not that will give an accurate measure of map activity remains to be seen but it should be interesting and I welcome feedback. So far I have noticed that off-peak times often have extended periods of zero kills (I thought it was broken at first).</p>\r\n                <p>So select a server and see how the match up is going!</p>\r\n                <br/><br/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n\r\n\r\n//<p>PS. Find out more about this project at <a href=\"https://www.dannywilkins.me/portfolio/gw2reactwebapp\">dannywilkins.me/portfolio/gw2reactwebapp</a></p>","import store from '../store';\r\nimport config from '../config.json';\r\n\r\nvar apiService = (function() {\r\n    var instance;\r\n\r\n    //Singleton wrapper\r\n    function init() {\r\n        var timerInstance = false;\r\n\r\n        //Dispatch a fetch to the store for the promise middleware to handle.\r\n        function fetchAPI(serverCode) {\r\n            store.dispatch({\r\n                type: \"FETCH_MATCHUP_DATA\",\r\n                payload: fetch(config.matchupAPIRoot + serverCode)\r\n                .then(response => response.json())\r\n            });\r\n        }\r\n    \r\n        //Find out if the public functions should just point to private ones with the actual code.\r\n        return { // public interface\r\n            startFetchingAPI: function (serverCode) {\r\n                //Check there is not already a timer\r\n                if (timerInstance) {\r\n                    clearInterval(timerInstance);\r\n                    timerInstance = false;\r\n                    console.warn(\"Existing API fetching overwritten.\")\r\n                }\r\n\r\n                //Run first fetch and start timer\r\n                fetchAPI(serverCode);\r\n                if (config.refreshInterval !== 0 ) { // 0 = don't update\r\n                    timerInstance = setInterval(fetchAPI, config.refreshInterval, serverCode);\r\n                }\r\n\r\n                //Set which server we are currently looking at\r\n                store.dispatch({\r\n                    type: \"SELECT_NEW_SERVER\",\r\n                    payload: serverCode\r\n                });\r\n            },\r\n            stopFetchingAPI: function () {\r\n                //Clear timer\r\n                clearInterval(timerInstance);\r\n                timerInstance = false;\r\n\r\n                //Reset the selected server to an empty string.\r\n                store.dispatch({\r\n                    type: \"SELECT_NEW_SERVER\",\r\n                    payload: ''\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    //Get singleton instance or create one using apiService.getInstance()\r\n    return  {\r\n        getInstance: function() {\r\n            if (!instance) {\r\n                instance = init();\r\n            }\r\n            return instance;\r\n        }\r\n    }    \r\n})();\r\n\r\nexport default apiService;","import React from 'react';\r\n\r\nclass ServerOverview extends React.Component {   \r\n    render() {\r\n        const { name, colour, ppt, kills, deaths, ratio, score, victoryPoints } = this.props;\r\n\r\n        return (\r\n            <div className={`card card-${colour}`}>\r\n                <div className={`row-fixed ${colour}`}>\r\n                    <div>{name}</div>\r\n                    <h2 className=\"ppt\">+ {ppt} PPT</h2>\r\n                </div>\r\n\r\n                <div className=\"row-fixed card-padding\">\r\n                    <div>\r\n                        <h3>Kills</h3>\r\n                        <p>{kills}</p>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Deaths</h3>\r\n                        <p>{deaths}</p>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Ratio</h3>\r\n                        <p>{ratio}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row-fixed card-padding\">\r\n                    <div>\r\n                        <h3>Skirmish Score</h3>\r\n                        <p>{score}</p>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Victory Points</h3>\r\n                        <p>{victoryPoints}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ServerOverview;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass MapServerScores extends React.Component {\r\n    render() {\r\n        const { serverName, colour, position, score, ppt, kills, deaths, ratio } = this.props;\r\n\r\n        return (\r\n            <div className={`inner-card inner-card-${colour}`}>\r\n                <div className={`row-fixed inner-card-${colour}`}>\r\n                    <h3 className=\"font-left-align\">{position} {serverName}</h3>\r\n                </div>\r\n\r\n                <div className=\"card-compact row-fixed\">\r\n                    <div>\r\n                        <p>Score:</p>\r\n                        <p>{score}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>PPT:</p>\r\n                        <p>{ppt}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>K/D/R:</p>\r\n                        <p>{kills} / {deaths} / {ratio}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMapServerScores.propTypes = {\r\n    serverName: PropTypes.string.isRequired,\r\n    colour: PropTypes.string.isRequired,\r\n    position: PropTypes.string.isRequired,\r\n    score: PropTypes.number.isRequired,\r\n    ppt: PropTypes.number.isRequired\r\n}\r\n\r\nexport default MapServerScores;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as serverHelper from '../../../helpers/serverHelper';\r\nimport * as analyticsHelper from '../../../helpers/analyticsHelper';\r\n\r\nimport MapServerScores from './MapServerScores';\r\n\r\n\r\nclass MapOverview extends React.Component {\r\n    render() {\r\n        let mapServerScores = this.compileMapServerScores(this.orderByMapScore());\r\n\r\n        return (\r\n            <section className=\"data-component-card\">\r\n                <div className=\"row-fixed\">\r\n                    <h3 className=\"font-left-align\">Map Overview</h3>\r\n                </div>\r\n                <div>\r\n                    {mapServerScores}\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n    \r\n    compileMapServerScores(mapScores) {\r\n        const { mapName, servers, activityAnalytics, kills, deaths} = this.props;\r\n\r\n        let mapServerScores = [];\r\n        const positions = [\"1st\", \"2nd\", \"3rd\"];\r\n        let counter = 0;\r\n\r\n        for (let map in mapScores) {\r\n            let colour = mapScores[map][0];\r\n            \r\n            mapServerScores.push(\r\n                <MapServerScores\r\n                    key={`${mapName}_${colour}`}\r\n                    serverName={serverHelper.getNameByCode(servers[colour])}\r\n                    colour={colour}\r\n                    position={positions[counter++]}\r\n                    score={mapScores[map][1]}\r\n                    ppt={activityAnalytics.currentPPT[colour]}\r\n                    kills={`${analyticsHelper.round(kills[colour]/1000, 1)}k`}\r\n                    deaths={`${analyticsHelper.round(deaths[colour]/1000, 1)}k`}\r\n                    ratio={analyticsHelper.round(kills[colour]/deaths[colour], 2)}\r\n                />\r\n            );\r\n        }\r\n\r\n        return mapServerScores;\r\n    }\r\n\r\n    orderByMapScore() {\r\n        const { mapScores } = this.props;\r\n\r\n        let mapScoresArray = [];\r\n        for (var map in mapScores) {\r\n            mapScoresArray.push([map, mapScores[map]]);\r\n        }\r\n        mapScoresArray.sort((x, y) => y[1] - x[1]);\r\n\r\n        return mapScoresArray;\r\n    }\r\n}\r\n\r\nMapOverview.propTypes = {\r\n    mapName: PropTypes.string.isRequired,\r\n    servers: PropTypes.object.isRequired,\r\n    mapScores: PropTypes.object.isRequired,\r\n    activityAnalytics: PropTypes.object.isRequired,\r\n    kills: PropTypes.object.isRequired,\r\n    deaths: PropTypes.object.isRequired\r\n}\r\n\r\nexport default MapOverview;","import React from 'react';\r\nimport Proptypes from 'prop-types';\r\n\r\nclass ObjectivesDisplay extends React.Component {\r\n    render() {\r\n        const { serverName, won, objectiveColours, stonemist } = this.props;\r\n        let stonemistIcon = (\r\n            <div className=\"row-fixed objective-container\">\r\n                <p>{won.castle}x</p><span><div className={`icon-castle icon-${objectiveColours.castle}`}></div></span>\r\n            </div>\r\n        );\r\n        if (!stonemist) {\r\n            stonemistIcon = \"\";\r\n        }\r\n\r\n        return(\r\n            <div className=\"objectives-grid\">\r\n                <h4>{`${serverName}: `}</h4>\r\n                <div className=\"row-fixed objective-container\">\r\n                    <p>{won.camp}x</p><span><div className={`icon-camp icon-${objectiveColours.camp}`}></div></span>\r\n                </div>\r\n                <div className=\"row-fixed objective-container\">\r\n                    <p>{won.tower}x</p><span><div className={`icon-tower icon-${objectiveColours.tower}`}></div></span>\r\n                </div>\r\n                <div className=\"row-fixed objective-container\">\r\n                    <p>{won.keep}x</p><span><div className={`icon-keep icon-${objectiveColours.keep}`}></div></span>\r\n                </div>\r\n                {stonemistIcon}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nObjectivesDisplay.propTypes = {\r\n    serverName: Proptypes.string.isRequired,\r\n    won: Proptypes.object.isRequired,\r\n    objectiveColours: Proptypes.object.isRequired\r\n}\r\n\r\nexport default ObjectivesDisplay;","import React from 'react';\r\nimport Proptypes from 'prop-types';\r\nimport * as serverHelper from '../../../helpers/serverHelper';\r\n\r\nimport ObjectivesDisplay from './ObjectivesDisplay';\r\n\r\nclass ObjectivesWonLost extends React.Component {\r\n\r\n\r\n    render() {\r\n        const { selectTimeFrame } =this.props;\r\n\r\n        let objectivesDisplays = this.compileObjectivesDisplays();\r\n        this.totalObjectivesWonLost();\r\n\r\n        return (\r\n            <section className=\"data-component-card card-padding\">\r\n                <div className=\"row-fixed\">\r\n                    <h3 className=\"font-left-align\">Objectives Gained</h3>\r\n                    <button className={`objectives-btn ${this.checkIsActive(300000)}`} onClick={() => selectTimeFrame(300000)}>&lt;5 mins</button>\r\n                    <button className={`objectives-btn ${this.checkIsActive(1800000)}`} onClick={() => selectTimeFrame(1800000)}>&lt;30 mins</button>\r\n                    <button className={`objectives-btn ${this.checkIsActive(3600000)}`} onClick={() => selectTimeFrame(3600000)}>&lt;60 mins</button>\r\n                </div>\r\n                <div>\r\n                    {objectivesDisplays}\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n\r\n    compileObjectivesDisplays() {\r\n        const { servers, mapName } = this.props;\r\n\r\n        let objectivesDisplays = [];\r\n        let serverColours = Object.getOwnPropertyNames(servers);\r\n        let objectivesWonLost = this.totalObjectivesWonLost();\r\n        let stonemist = false;\r\n\r\n        if (mapName === \"Eternal Battlegrounds\")\r\n        stonemist = true;\r\n\r\n        let i;\r\n        for (i = 0; i < serverColours.length; i++) {\r\n            let server = serverColours[i];\r\n            let objectiveColours = {camp: \"\", tower: \"\", keep: \"\", castle: \"\"};\r\n\r\n            for (var objective in objectivesWonLost[server]) {\r\n                if (objectivesWonLost[server][objective] > 0) {\r\n                    objectiveColours[objective] = server;\r\n                }\r\n                else {\r\n                    objectiveColours[objective] = \"grey\";\r\n                }\r\n            }\r\n\r\n            objectivesDisplays.push(\r\n                <ObjectivesDisplay\r\n                    key={`${this.props.mapName}_${server}`}\r\n                    serverName={serverHelper.getNameByCode(servers[server])}\r\n                    won={objectivesWonLost[server]}\r\n                    objectiveColours={objectiveColours}\r\n                    stonemist={stonemist}\r\n                />\r\n            )\r\n        }\r\n\r\n        return objectivesDisplays;\r\n    }\r\n\r\n    totalObjectivesWonLost() {\r\n        const { objectives, timeFrame } = this.props;\r\n\r\n        //Blank objectives won object\r\n        let objectivesWonLost = {\r\n            red: {\r\n                camp: 0,\r\n                tower: 0,\r\n                keep: 0,\r\n                castle: 0\r\n            },\r\n            blue: {\r\n                camp: 0,\r\n                tower: 0,\r\n                keep: 0,\r\n                castle: 0\r\n            },\r\n            green: {\r\n                camp: 0,\r\n                tower: 0,\r\n                keep: 0,\r\n                castle: 0\r\n            }\r\n        }\r\n\r\n        //Loop through all objectives, check if they were captured in the last five minutes, then increment the value in the object above.\r\n        var currentTime = new Date();\r\n\r\n        for (var objective in objectives) {\r\n            let x = objectives[objective];\r\n            let last_flipped = currentTime - new Date(x.last_flipped);\r\n\r\n            if ( last_flipped < timeFrame ) {\r\n                let owner = x.owner;\r\n                let type = x.type;\r\n\r\n                objectivesWonLost[owner.toLowerCase()][type.toLowerCase()]++;\r\n            }\r\n        }\r\n\r\n        return objectivesWonLost;\r\n    }\r\n\r\n    //If the time equals the currently selected time, add CSS to show the button as active\r\n    checkIsActive(time) {\r\n        return (time === this.props.timeFrame ? \"objectives-btn-active\" : \"\");\r\n    }\r\n}\r\n\r\nObjectivesWonLost.proptypes = {\r\n    mapName: Proptypes.string.isRequired,\r\n    servers: Proptypes.object.isRequired,\r\n    objectives: Proptypes.object.isRequired,\r\n    timeFrame: Proptypes.number.isRequired,\r\n    selectTimeFrame: Proptypes.func.isRequired\r\n}\r\n\r\nexport default ObjectivesWonLost;","import React from 'react';\r\nimport Proptypes from 'prop-types';\r\n\r\nexport default function KillsTrackerBars(props) {\r\n    const { kills, killsWidth, killsHeight, killsXPos, killsYPos } = props;\r\n    const { deaths, deathsWidth, deathsHeight, deathsXPos, deathsYPos } = props;\r\n\r\n    return (\r\n        <g>\r\n            <rect width={killsWidth} height={killsHeight} x={killsXPos} y={killsYPos}>\r\n                <title>Kills: {kills}</title>\r\n            </rect>\r\n            <rect width={deathsWidth} height={deathsHeight} x={deathsXPos} y={deathsYPos}>\r\n                <title>Deaths: {deaths}</title>\r\n            </rect>\r\n        </g>\r\n    )\r\n}\r\n\r\nKillsTrackerBars.proptypes = {\r\n    kills: Proptypes.number.isRequired,\r\n    killsWidth: Proptypes.string.isRequired,\r\n    killsHeight: Proptypes.string.isRequired,\r\n    killsXPos: Proptypes.string.isRequired,\r\n    killsYPos: Proptypes.string.isRequired,\r\n    deaths: Proptypes.number.isRequired,\r\n    deathsWidth: Proptypes.string.isRequired,\r\n    deathsHeight: Proptypes.string.isRequired,\r\n    deathsXPos: Proptypes.string.isRequired,\r\n    deathsYPos: Proptypes.string.isRequired\r\n}","import React from 'react';\r\nimport Proptypes from 'prop-types';\r\n\r\nexport default function KillsTrackerGraphXAxis(props) {\r\n    const { xPos, time } = props;\r\n\r\n    return (\r\n        <g className=\"graph-axis-tags\">\r\n            <rect width=\"1px\" height=\"6%\" x={`${xPos}%`} y=\"75%\"/>\r\n            <text x={`${xPos-4}%`} y=\"100%\">{time}</text>\r\n        </g>\r\n    )\r\n}\r\n\r\nKillsTrackerGraphXAxis.proptypes = {\r\n    xPos: Proptypes.number.isRequired,\r\n    time: Proptypes.string\r\n}","// hooks = true ;)\r\n\r\nimport React, { useState } from 'react';\r\nimport Proptypes from 'prop-types';\r\n\r\nimport KillsTrackerBars from './KillsTrackerBars';\r\nimport KillsTrackerGraphXAxis from './KillsTrackerGraphXAxis';\r\n\r\nexport default function KillsTrackerGraph(props) {\r\n    const [ highestValue, setHighestValue ] = useState(10);\r\n    const { data } = props;\r\n    const graphBars = useGraphBars(data, highestValue, setHighestValue);\r\n    const timestampsThirty = [\"-2m30\", \"-2m\", \"-1m30\", \"-1m\", \"-30s\", \"0s\"]\r\n    const timestampsXPos = [10, 27, 45, 63, 82, 99];\r\n    const timestamps = useGraphTimestamps(graphBars.length, timestampsXPos, timestampsThirty);\r\n\r\n\r\n    return (\r\n        <svg className=\"killstracker-graph\">\r\n            <g className=\"graph-axis-tags\">\r\n                <rect width=\"8px\" height=\"1px\" x=\"18px\" y=\"75%\"/>\r\n                <text x=\"6px\" y=\"80%\">0</text>\r\n                <rect width=\"8px\" height=\"1px\" x=\"18px\" y=\"1px\"/>\r\n                <text x=\"0%\" y=\"14%\">{highestValue}</text>\r\n            </g>\r\n            {graphBars}\r\n            <g>\r\n                {timestamps}\r\n            </g>\r\n        </svg>\r\n    )\r\n}\r\n\r\nfunction useGraphBars(data, highestValueState, setHighestValue) {\r\n    let dataDiff = [];\r\n    let graphBars = [];\r\n    let maxBars = 5; //A temporary hardcoded solution to\r\n    let highestValue = 10; //This resets the highest value to the default value\r\n    //Also, it's important not to use the highest value from state as that risks a rerender loop.\r\n    \r\n    //Find out where to start if there is more data than can be displayed.\r\n    let startingPos = data.length - maxBars;\r\n    if (startingPos < 1) { startingPos = 1 }\r\n\r\n    //Create a new array based on the differences between the kills and deaths in data\r\n    for (let i = startingPos; i < data.length; i++) {\r\n        dataDiff.push(\r\n            [data[i][0] - data[i-1][0], data[i][1] - data[i-1][1]]\r\n        )\r\n    }\r\n\r\n    //Find highest value in 2D array \"data\" and store it as \"highestValue\"\r\n    for (let i = 0; i < dataDiff.length; i++) {\r\n        if (dataDiff[i][0] > highestValue) {highestValue = dataDiff[i][0]};\r\n        if (dataDiff[i][1] > highestValue) {highestValue = dataDiff[i][1]};\r\n    }\r\n\r\n    //Set the highestValue in state to display it if it is different. \r\n    if (highestValueState !== highestValue) {\r\n        setHighestValue(highestValue);\r\n    }\r\n\r\n    //Format the kills and deaths differences into the KillsTrackerBars svg format\r\n    for (var i = 0; i < dataDiff.length; i++) {\r\n        //Convert the difference to a percentage based on the highest difference for scale.\r\n        let killsNormalised = dataDiff[i][0] / highestValue * 80;\r\n        let deathsNormalised = dataDiff[i][1] / highestValue * 80;\r\n\r\n        //Change 0s to 1s to show a thin bar on the graph.\r\n        if (killsNormalised === 0 ) {killsNormalised = 1};\r\n        if (deathsNormalised === 0) {deathsNormalised = 1};\r\n\r\n        graphBars.push(\r\n            <KillsTrackerBars\r\n                key={`GraphBars_${i}`}\r\n                kills={dataDiff[i][0]}\r\n                killsWidth={\"6%\"}\r\n                killsHeight={`${killsNormalised}%`}\r\n                killsXPos={`${12 + 18*(i)}%`}\r\n                killsYPos={`${75 - killsNormalised}%`}\r\n                deaths={dataDiff[i][1]}\r\n                deathsWidth={\"6%\"}\r\n                deathsHeight={`${deathsNormalised}%`}\r\n                deathsXPos={`${19 + 18*(i)}%`}\r\n                deathsYPos={`${75 - deathsNormalised}%`}\r\n            />\r\n        )\r\n    }\r\n\r\n    return graphBars;\r\n}\r\n\r\n//This baby just compiles an array of X axis tags and timestamps, reflecting the data in the timestamps.\r\nfunction useGraphTimestamps (numberOfIntervals, timestampsXPos, timestampsReference) {\r\n    let timestamps = [];\r\n    let times = [];\r\n\r\n    \r\n    for (let i = 5 - numberOfIntervals; i < 6; i++) {\r\n        times.push(timestampsReference[i]);\r\n    }\r\n\r\n    for (let i = times.length; i < 6; i++) {\r\n        times.push(\"\");\r\n    }\r\n\r\n    for (let i = 0; i < 6; i++) {\r\n        timestamps.push(\r\n            <KillsTrackerGraphXAxis \r\n                key={\"axis_stamp_\" + i}\r\n                xPos={timestampsXPos[i]}\r\n                time={times[i]}\r\n            />\r\n        )\r\n    }\r\n\r\n    return timestamps;\r\n}\r\n\r\n\r\n\r\nKillsTrackerGraph.proptypes = {\r\n    data: Proptypes.array.isRequired,\r\n    showToolTip: Proptypes.func.isRequired\r\n}","//Hooks = true ;)\r\n\r\nimport React from 'react';\r\nimport Proptypes from 'prop-types';\r\n\r\nimport KillsTrackerGraph from './KillsTrackerGraph';\r\n\r\nexport default function KillsTrackerDisplay(props) {\r\n    const { serverName, kills } = props;\r\n\r\n    return (\r\n        <div className=\"killstracker-grid\">\r\n            <h4>{`${serverName}: `}</h4>\r\n            <KillsTrackerGraph className=\"row-fixed killstracker-container\" data={kills}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nKillsTrackerDisplay.proptypes = {\r\n    serverName: Proptypes.string.isRequired,\r\n    kills: Proptypes.array.isRequired\r\n}","//Trying Hooks for the first time!\r\n\r\nimport React from 'react';\r\nimport Proptypes from 'prop-types';\r\nimport * as serverHelper from '../../../helpers/serverHelper';\r\n\r\nimport KillsTrackerDisplay from './KillsTrackerDisplay';\r\n\r\nexport default function KillsTracker(props) {\r\n    const { servers, kills } = props;\r\n    const killsTrackerDisplays = useKillsTrackerDisplay(servers, kills);\r\n\r\n    return (\r\n        <section className=\"data-component-card card-padding\">\r\n                <div className=\"row-fixed\">\r\n                    <h3 className=\"font-left-align\">Kills &amp; Deaths Tracker</h3>\r\n                </div>\r\n                <div>\r\n                    <p className=\"font-left-align\">Watching for kills in 30 second intervals. Hover over bars for exact numbers.</p>\r\n                </div>\r\n                <div>\r\n                    {killsTrackerDisplays}\r\n                </div>\r\n            </section>\r\n    );\r\n}\r\n\r\nfunction useKillsTrackerDisplay(servers, kills) {\r\n\r\n    let killsTrackerDisplays = [];\r\n    let serverColours = Object.getOwnPropertyNames(servers);\r\n\r\n\r\n    let i;\r\n    for (i = 0; i < serverColours.length; i++) {    \r\n        var colour = serverColours[i];\r\n        \r\n        killsTrackerDisplays.push(\r\n            <KillsTrackerDisplay\r\n                key={'KillsTrackerDisplay_' + colour}\r\n                serverName={serverHelper.getNameByCode(servers[colour])}\r\n                kills={kills[colour]}\r\n            />\r\n        )\r\n    }\r\n\r\n    return killsTrackerDisplays;\r\n}\r\n\r\nKillsTracker.proptypes = {\r\n    kills: Proptypes.object.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as serverHelper from '../helpers/serverHelper';\r\n\r\nimport MapOverview from './dataPieces/MapOverview/MapOverview';\r\nimport ObjectivesWonLost from './dataPieces/ObjectivesWonLost/ObjectivesWonLost';\r\nimport KillsTracker from './dataPieces/KillsTracker/KillsTracker';\r\n\r\nclass MapDetails extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {mapArrayPosition: serverHelper.getMapArrayPosition(this.props.colour, this.props.fullAPI.maps)}\r\n    }\r\n\r\n    render() {\r\n        const { mapName, colour, fullAPI, activityAnalytics, timeFrame, selectTimeFrame } = this.props;\r\n        const { mapArrayPosition } = this.state;\r\n\r\n        return (\r\n            <div className={`card card-${colour}`}>\r\n                <div className={`row-fixed ${colour}`}>\r\n                    <h2>{mapName}</h2>\r\n                </div>\r\n                <MapOverview\r\n                    mapName={mapName}\r\n                    servers={fullAPI.worlds}\r\n                    mapScores={fullAPI.skirmishes[fullAPI.skirmishes.length-1].map_scores[mapArrayPosition].scores}\r\n                    activityAnalytics={activityAnalytics}\r\n                    kills={fullAPI.maps[mapArrayPosition].kills}\r\n                    deaths={fullAPI.maps[mapArrayPosition].deaths}\r\n                />\r\n                <ObjectivesWonLost\r\n                    mapName={mapName}\r\n                    servers={fullAPI.worlds}\r\n                    objectives={fullAPI.maps[mapArrayPosition].objectives}\r\n                    timeFrame={timeFrame}\r\n                    selectTimeFrame={selectTimeFrame}\r\n                />\r\n                <KillsTracker\r\n                    servers={fullAPI.worlds}\r\n                    kills={activityAnalytics.kd}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    checkMapArrayPosition() {\r\n        let mapArrayPosition = serverHelper.getMapArrayPosition(this.props.colour, this.props.fullAPI.maps)\r\n        if (this.state.mapArrayPosition !== mapArrayPosition) {\r\n            this.setState(mapArrayPosition);\r\n        }\r\n    }\r\n}\r\n\r\nMapDetails.propTypes = {\r\n    mapName: PropTypes.string.isRequired,\r\n    colour: PropTypes.string,\r\n    fullAPI: PropTypes.object.isRequired,\r\n    activityAnalytics: PropTypes.object.isRequired,\r\n    timeFrame: PropTypes.number.isRequired,\r\n    selectTimeFrame: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = function(store) {\r\n    return {\r\n        fullAPI: store.fullAPIState\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(MapDetails);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as serverHelper from '../helpers/serverHelper';\r\nimport * as analyticsHelper from '../helpers/analyticsHelper';\r\nimport ApiService from '../services/apiService';\r\n\r\nimport ServerOverview from './ServerOverview';\r\nimport MapDetails from './MapDetails';\r\n\r\n//Look up server match up and assign servers to colours/borderlands\r\nclass MatchUpOverview extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentServer: '',\r\n            timeFrame: 3600000\r\n        }\r\n\r\n        this.selectTimeFrame = this.selectTimeFrame.bind(this);\r\n    }\r\n\r\n    //Get the code of the desired server, fetch the match up data, store server code in state.\r\n    componentDidMount() {\r\n        var serverCode = serverHelper.getCodeByName(this.props.match.params.serverName);\r\n\r\n        //Create/get instance of apiService and start fetching the API\r\n        var apiService = ApiService.getInstance();\r\n        apiService.startFetchingAPI(serverCode);\r\n\r\n        this.setState({currentServer: serverCode});\r\n    }\r\n\r\n    //Fetch new match up data if a new sever is selected\r\n    componentDidUpdate() {\r\n        var serverCode = serverHelper.getCodeByName(this.props.match.params.serverName);\r\n\r\n        if (serverCode !== this.state.currentServer){\r\n\r\n            this.setState({currentServer: serverCode});\r\n\r\n            var apiService = ApiService.getInstance();\r\n            apiService.stopFetchingAPI();\r\n            apiService.startFetchingAPI(serverCode);\r\n\r\n        }\r\n    }\r\n\r\n    //Stop fetching the API (also resets the selected server in store to '')\r\n    componentWillUnmount() {\r\n        var apiService = ApiService.getInstance();\r\n            apiService.stopFetchingAPI();\r\n    }\r\n\r\n    //Rough draft of a render statement while details are still being ironed out\r\n    render() {\r\n        const { displayState } = this.props;\r\n\r\n        //Error fetching from API.\r\n        if (displayState.fetchFailed) {\r\n            return <p>Unable to find data for this match up. Please try selecting another server or try again later.</p>\r\n        }\r\n\r\n        //Show loading\r\n        if (!displayState.firstFetchSuccess) {\r\n            return <p>Loading... If this takes more than ten seconds, please check the URL and refresh.</p>\r\n        }\r\n\r\n        //Data has returned. Full display.\r\n        var serverOverviews = this.compileServerOverviews();\r\n        var mapDetails = this.compileMapDetails();\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"row-responsive-3\">\r\n                    {serverOverviews}\r\n                </div>\r\n                <div className=\"bar\"></div>\r\n                <div className=\"row-responsive-4\">\r\n                    {mapDetails}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //Loop through the servers assigning values from store to props for <ServerOverview /> to display\r\n    compileServerOverviews() {\r\n        const { fullAPI, serverOverview, activityAnalytics } = this.props;\r\n        var serverColours = Object.getOwnPropertyNames(fullAPI.worlds);\r\n        var overviews = [];\r\n\r\n        var i;\r\n        for (i = 0; i < serverColours.length; i++) {\r\n            var colour = serverColours[i];\r\n            var server = serverOverview[colour];\r\n            \r\n            //Add up PPT from maps\r\n            var j;\r\n            server.ppt = 0;\r\n            var maps = Object.getOwnPropertyNames(activityAnalytics);\r\n            for (j = 0; j < maps.length; j++) {\r\n                server.ppt += activityAnalytics[maps[j]].currentPPT[colour];\r\n            }\r\n\r\n            overviews.push(\r\n                <ServerOverview\r\n                    key={colour}\r\n                    name={server.name}\r\n                    colour={colour}\r\n                    ppt={server.ppt}\r\n                    kills={analyticsHelper.beautifyNumber(server.kills)}\r\n                    deaths={analyticsHelper.beautifyNumber(server.deaths)}\r\n                    ratio={analyticsHelper.beautifyNumber(server.ratio)}\r\n                    score={analyticsHelper.beautifyNumber(server.skirmishScore)}\r\n                    victoryPoints={server.victoryPoints}\r\n                />\r\n            );\r\n        }\r\n        return overviews;\r\n    }\r\n\r\n    compileMapDetails() {\r\n        const { fullAPI, activityAnalytics } = this.props;\r\n        const { timeFrame } = this.state;\r\n        var mapDetails = [];\r\n\r\n        \r\n        mapDetails.push(\r\n            <MapDetails \r\n                key=\"0\" \r\n                mapName=\"Eternal Battlegrounds\" \r\n                colour=\"grey\"\r\n                activityAnalytics={activityAnalytics.eternalBattlegrounds}\r\n                timeFrame={timeFrame}\r\n                selectTimeFrame={this.selectTimeFrame}\r\n            />\r\n        );\r\n\r\n        \r\n        let serverColours = Object.getOwnPropertyNames(fullAPI.worlds);\r\n        let i;\r\n        for (i = 0; i < serverColours.length; i++) {\r\n            let colour = serverColours[i];\r\n\r\n            mapDetails.push(\r\n                <MapDetails \r\n                    key={fullAPI.worlds[colour]} \r\n                    mapName={`${serverHelper.getNameByCode(fullAPI.worlds[colour])} Borderland`} \r\n                    colour={colour}\r\n                    activityAnalytics={activityAnalytics[`${colour}Borderland`]}\r\n                    timeFrame={timeFrame}\r\n                    selectTimeFrame={this.selectTimeFrame}\r\n                />\r\n            );\r\n        }      \r\n        \r\n\r\n        return mapDetails;\r\n    }\r\n\r\n    selectTimeFrame(timeFrame) {\r\n        this.setState({timeFrame});\r\n    }\r\n}\r\n\r\nconst mapStateToProps = function(store) {\r\n    return {\r\n        displayState: store.displayState,\r\n        fullAPI: store.fullAPIState,\r\n        serverOverview: store.serverOverviewState,\r\n        activityAnalytics: store.activityAnalyticsState\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(MatchUpOverview);","import React, { Fragment } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\n//Layouts\r\nimport Header from './components/layouts/Header';\r\n\r\n//Pages\r\nimport Home from './components/Home';\r\nimport MatchUpOverview from './components/MatchUpOverview';\r\n\r\n\r\nexport default (\r\n    <BrowserRouter basename=\"/react-wvw-data/\">\r\n        <Fragment>\r\n            <Header />\r\n            <Switch>\r\n                <Route path=\"/\" component={Home} exact/>>\r\n                <Route path=\"/:serverName\" component={MatchUpOverview} />\r\n                <Route component={Home} />\r\n            </Switch>\r\n        </Fragment>\r\n    </BrowserRouter>\r\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport router from './router';\nimport './main.css';\n\nReactDOM.render(\n    <Provider store={store} >{router}</Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}